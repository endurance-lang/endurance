Terminals unused in grammar

    MAIN
    CONST
    PRINTF
    SCANF
    GOTO
    UNION
    FREE
    SLICE
    SOME
    REDUCE
    FILTER
    MAP
    SORT
    INVALID
    UMINUS
    DOT


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmts stmt
    3      | %empty

    4 stmt: conditional
    5     | repetition
    6     | func
    7     | var SEMI_COLON
    8     | commands
    9     | expr SEMI_COLON
   10     | BLOCK_OPEN stmts BLOCK_CLOSE

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt

   12 $@1: %empty

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt
   14            | SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

   15 condexpr: expr

   16 caselist: caselist CASE term COLON stmts
   17         | caselist DEFAULT COLON stmts
   18         | %empty

   19 $@2: %empty

   20 repetition: $@2 WHILE OPEN_PAREN repexpr CLOSE_PAREN stmt

   21 $@3: %empty

   22 $@4: %empty

   23 $@5: %empty

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

   25 $@6: %empty

   26 repetition: $@6 DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

   27 repexpr: expr

   28 var: IDENTIFIER IDENTIFIER constvector

   29 $@7: %empty

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

   31 typelist: typelist COMMA var
   32         | var

   33 termlist: termlist COMMA term
   34         | term

   35 opttypelist: typelist
   36            | %empty

   37 opttermlist: termlist
   38            | %empty

   39 commands: RETURN optexpr SEMI_COLON
   40         | BREAK SEMI_COLON
   41         | CONTINUE SEMI_COLON
   42         | TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON
   43         | INCLUDE STRING SEMI_COLON
   44         | STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE
   45         | ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

   46 varlist: varlist var SEMI_COLON
   47        | %empty

   48 idlist: IDENTIFIER COMMA idlist
   49       | IDENTIFIER

   50 optexpr: expr
   51        | %empty

   52 expr: expr ADD expr
   53     | expr SUB expr
   54     | expr MUL expr
   55     | expr DIV expr
   56     | expr MOD expr
   57     | expr BITWISE_AND expr
   58     | expr BITWISE_OR expr
   59     | expr BITWISE_NOT expr
   60     | expr BITWISE_XOR expr
   61     | expr LEFT_SHIFT expr
   62     | expr RIGHT_SHIFT expr
   63     | expr EQ expr
   64     | expr NE expr
   65     | expr LT expr
   66     | expr GT expr
   67     | expr LE expr
   68     | expr GE expr
   69     | expr LOGICAL_AND expr
   70     | expr LOGICAL_OR expr
   71     | OPEN_PAREN expr CLOSE_PAREN
   72     | LOGICAL_NOT expr
   73     | SUB expr
   74     | term
   75     | attr ASSIGN expr
   76     | SIZEOF IDENTIFIER

   77 term: const
   78     | IDENTIFIER OPEN_PAREN opttermlist CLOSE_PAREN
   79     | attr

   80 attr: IDENTIFIER exprvector
   81     | attr POINTER attr

   82 const: INTEGER
   83      | DECIMAL
   84      | STRING
   85      | boolean

   86 boolean: TRUE
   87        | FALSE

   88 exprvector: OPEN_BRACKET expr CLOSE_BRACKET
   89           | %empty

   90 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET
   91            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE (258) 43
    MAIN (259)
    BREAK (260) 40
    CASE (261) 16
    CONST (262)
    CONTINUE (263) 41
    DEFAULT (264) 17
    IF (265) 11 13
    ELSE (266) 13
    ENUM (267) 45
    RETURN (268) 39
    STRUCT (269) 44
    DO (270) 26
    PRINTF (271)
    SCANF (272)
    FOR (273) 24
    GOTO (274)
    SIZEOF (275) 76
    SWITCH (276) 14
    TYPEDEF (277) 42
    UNION (278)
    WHILE (279) 20 26
    FREE (280)
    POINTER (281) 81
    SLICE (282)
    SOME (283)
    REDUCE (284)
    FILTER (285)
    MAP (286)
    SORT (287)
    CLOSE_BRACKET (288) 88 90
    OPEN_BRACKET (289) 88 90
    CLOSE_PAREN (290) 11 13 14 20 24 26 30 71 78
    OPEN_PAREN (291) 11 13 14 20 24 26 30 71 78
    BLOCK_CLOSE (292) 10 14 30 44 45
    BLOCK_OPEN (293) 10 14 30 44 45
    ADD (294) 52
    SUB (295) 53 73
    MUL (296) 54
    DIV (297) 55
    BITWISE_AND (298) 57
    BITWISE_OR (299) 58
    BITWISE_NOT (300) 59
    MOD (301) 56
    LEFT_SHIFT (302) 61
    RIGHT_SHIFT (303) 62
    LT (304) 65
    GT (305) 66
    LE (306) 67
    GE (307) 68
    EQ (308) 63
    NE (309) 64
    BITWISE_XOR (310) 60
    LOGICAL_AND (311) 69
    LOGICAL_OR (312) 70
    LOGICAL_NOT (313) 72
    COLON (314) 16 17
    SEMI_COLON (315) 7 9 24 26 39 40 41 42 43 46
    ASSIGN (316) 75
    COMMA (317) 31 33 48
    INVALID (318)
    UMINUS (319)
    DECIMAL (320) 83
    STRING (321) 43 84
    DOT (322)
    IDENTIFIER <string> (323) 28 30 42 44 45 48 49 76 78 80
    INTEGER <integer> (324) 82 90
    TRUE <boolean> (325) 86
    FALSE <boolean> (326) 87
    IFX (327)
    UNARY (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    program (75)
        on left: 1
        on right: 0
    stmts (76)
        on left: 2 3
        on right: 1 2 10 16 17 30
    stmt (77)
        on left: 4 5 6 7 8 9 10
        on right: 2 11 13 20 24 26
    conditional (78)
        on left: 11 13 14
        on right: 4
    $@1 (79)
        on left: 12
        on right: 13
    condexpr (80)
        on left: 15
        on right: 11 13 14
    caselist (81)
        on left: 16 17 18
        on right: 14 16 17
    repetition (82)
        on left: 20 24 26
        on right: 5
    $@2 (83)
        on left: 19
        on right: 20
    $@3 (84)
        on left: 21
        on right: 24
    $@4 (85)
        on left: 22
        on right: 24
    $@5 (86)
        on left: 23
        on right: 24
    $@6 (87)
        on left: 25
        on right: 26
    repexpr (88)
        on left: 27
        on right: 20 24
    var (89)
        on left: 28
        on right: 7 31 32 46
    func (90)
        on left: 30
        on right: 6
    $@7 (91)
        on left: 29
        on right: 30
    typelist (92)
        on left: 31 32
        on right: 31 35
    termlist (93)
        on left: 33 34
        on right: 33 37
    opttypelist (94)
        on left: 35 36
        on right: 30
    opttermlist (95)
        on left: 37 38
        on right: 78
    commands (96)
        on left: 39 40 41 42 43 44 45
        on right: 8
    varlist (97)
        on left: 46 47
        on right: 44 46
    idlist (98)
        on left: 48 49
        on right: 45 48
    optexpr (99)
        on left: 50 51
        on right: 24 39
    expr <exprData> (100)
        on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 9 15 26 27 50 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 88
    term <exprData> (101)
        on left: 77 78 79
        on right: 16 33 34 74
    attr <string> (102)
        on left: 80 81
        on right: 75 79 81
    const <exprData> (103)
        on left: 82 83 84 85
        on right: 77
    boolean <boolean> (104)
        on left: 86 87
        on right: 85
    exprvector <exprData> (105)
        on left: 88 89
        on right: 80
    constvector <integer> (106)
        on left: 90 91
        on right: 28


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (stmts)

    program  go to state 1
    stmts    go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts .
    2 stmts: stmts . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    WHILE     reduce using rule 19 ($@2)
    $default  reduce using rule 1 (program)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 3

    0 $accept: program $end .

    $default  accept


State 4

   43 commands: INCLUDE . STRING SEMI_COLON

    STRING  shift, and go to state 38


State 5

   40 commands: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 39


State 6

   41 commands: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 40


State 7

   11 conditional: IF . OPEN_PAREN condexpr CLOSE_PAREN stmt
   13            | IF . OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    OPEN_PAREN  shift, and go to state 41


State 8

   45 commands: ENUM . IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 42


State 9

   39 commands: RETURN . optexpr SEMI_COLON

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 51 (optexpr)

    optexpr  go to state 44
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 10

   44 commands: STRUCT . IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 46


State 11

   24 repetition: FOR . OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    OPEN_PAREN  shift, and go to state 47


State 12

   76 expr: SIZEOF . IDENTIFIER

    IDENTIFIER  shift, and go to state 48


State 13

   14 conditional: SWITCH . OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    OPEN_PAREN  shift, and go to state 49


State 14

   42 commands: TYPEDEF . IDENTIFIER IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 50


State 15

   71 expr: OPEN_PAREN . expr CLOSE_PAREN

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 51
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 16

   10 stmt: BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 52


State 17

   73 expr: SUB . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 53
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 18

   72 expr: LOGICAL_NOT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 54
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 19

   83 const: DECIMAL .

    $default  reduce using rule 83 (const)


State 20

   84 const: STRING .

    $default  reduce using rule 84 (const)


State 21

   28 var: IDENTIFIER . IDENTIFIER constvector
   30 func: IDENTIFIER . IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE
   78 term: IDENTIFIER . OPEN_PAREN opttermlist CLOSE_PAREN
   80 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55
    OPEN_PAREN    shift, and go to state 56
    IDENTIFIER    shift, and go to state 57

    $default  reduce using rule 89 (exprvector)

    exprvector  go to state 58


State 22

   82 const: INTEGER .

    $default  reduce using rule 82 (const)


State 23

   86 boolean: TRUE .

    $default  reduce using rule 86 (boolean)


State 24

   87 boolean: FALSE .

    $default  reduce using rule 87 (boolean)


State 25

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


State 26

    4 stmt: conditional .

    $default  reduce using rule 4 (stmt)


State 27

    5 stmt: repetition .

    $default  reduce using rule 5 (stmt)


State 28

   20 repetition: $@2 . WHILE OPEN_PAREN repexpr CLOSE_PAREN stmt

    WHILE  shift, and go to state 59


State 29

   26 repetition: $@6 . DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    DO  shift, and go to state 60


State 30

    7 stmt: var . SEMI_COLON

    SEMI_COLON  shift, and go to state 61


State 31

    6 stmt: func .

    $default  reduce using rule 6 (stmt)


State 32

    8 stmt: commands .

    $default  reduce using rule 8 (stmt)


State 33

    9 stmt: expr . SEMI_COLON
   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    SEMI_COLON   shift, and go to state 81


State 34

   74 expr: term .

    $default  reduce using rule 74 (expr)


State 35

   75 expr: attr . ASSIGN expr
   79 term: attr .
   81 attr: attr . POINTER attr

    POINTER  shift, and go to state 82
    ASSIGN   shift, and go to state 83

    $default  reduce using rule 79 (term)


State 36

   77 term: const .

    $default  reduce using rule 77 (term)


State 37

   85 const: boolean .

    $default  reduce using rule 85 (const)


State 38

   43 commands: INCLUDE STRING . SEMI_COLON

    SEMI_COLON  shift, and go to state 84


State 39

   40 commands: BREAK SEMI_COLON .

    $default  reduce using rule 40 (commands)


State 40

   41 commands: CONTINUE SEMI_COLON .

    $default  reduce using rule 41 (commands)


State 41

   11 conditional: IF OPEN_PAREN . condexpr CLOSE_PAREN stmt
   13            | IF OPEN_PAREN . condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    condexpr  go to state 85
    expr      go to state 86
    term      go to state 34
    attr      go to state 35
    const     go to state 36
    boolean   go to state 37


State 42

   45 commands: ENUM IDENTIFIER . BLOCK_OPEN idlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 87


State 43

   78 term: IDENTIFIER . OPEN_PAREN opttermlist CLOSE_PAREN
   80 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55
    OPEN_PAREN    shift, and go to state 56

    $default  reduce using rule 89 (exprvector)

    exprvector  go to state 58


State 44

   39 commands: RETURN optexpr . SEMI_COLON

    SEMI_COLON  shift, and go to state 88


State 45

   50 optexpr: expr .
   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 50 (optexpr)


State 46

   44 commands: STRUCT IDENTIFIER . BLOCK_OPEN varlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 89


State 47

   24 repetition: FOR OPEN_PAREN . optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 51 (optexpr)

    optexpr  go to state 90
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 48

   76 expr: SIZEOF IDENTIFIER .

    $default  reduce using rule 76 (expr)


State 49

   14 conditional: SWITCH OPEN_PAREN . condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    condexpr  go to state 91
    expr      go to state 86
    term      go to state 34
    attr      go to state 35
    const     go to state 36
    boolean   go to state 37


State 50

   42 commands: TYPEDEF IDENTIFIER . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 92


State 51

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   71     | OPEN_PAREN expr . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 93
    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80


State 52

    2 stmts: stmts . stmt
   10 stmt: BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_CLOSE  shift, and go to state 94
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 53

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   73     | SUB expr .

    $default  reduce using rule 73 (expr)


State 54

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   72     | LOGICAL_NOT expr .

    $default  reduce using rule 72 (expr)


State 55

   88 exprvector: OPEN_BRACKET . expr CLOSE_BRACKET

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 95
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 56

   78 term: IDENTIFIER OPEN_PAREN . opttermlist CLOSE_PAREN

    DECIMAL     shift, and go to state 19
    STRING      shift, and go to state 20
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 22
    TRUE        shift, and go to state 23
    FALSE       shift, and go to state 24

    $default  reduce using rule 38 (opttermlist)

    termlist     go to state 96
    opttermlist  go to state 97
    term         go to state 98
    attr         go to state 99
    const        go to state 36
    boolean      go to state 37


State 57

   28 var: IDENTIFIER IDENTIFIER . constvector
   30 func: IDENTIFIER IDENTIFIER . $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_BRACKET  shift, and go to state 100

    SEMI_COLON  reduce using rule 91 (constvector)
    $default    reduce using rule 29 ($@7)

    $@7          go to state 101
    constvector  go to state 102


State 58

   80 attr: IDENTIFIER exprvector .

    $default  reduce using rule 80 (attr)


State 59

   20 repetition: $@2 WHILE . OPEN_PAREN repexpr CLOSE_PAREN stmt

    OPEN_PAREN  shift, and go to state 103


State 60

   26 repetition: $@6 DO . stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 104
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 61

    7 stmt: var SEMI_COLON .

    $default  reduce using rule 7 (stmt)


State 62

   52 expr: expr ADD . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 105
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 63

   53 expr: expr SUB . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 106
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 64

   54 expr: expr MUL . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 107
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 65

   55 expr: expr DIV . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 108
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 66

   57 expr: expr BITWISE_AND . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 109
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 67

   58 expr: expr BITWISE_OR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 110
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 68

   59 expr: expr BITWISE_NOT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 111
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 69

   56 expr: expr MOD . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 112
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 70

   61 expr: expr LEFT_SHIFT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 113
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 71

   62 expr: expr RIGHT_SHIFT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 114
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 72

   65 expr: expr LT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 115
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 73

   66 expr: expr GT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 116
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 74

   67 expr: expr LE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 117
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 75

   68 expr: expr GE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 118
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 76

   63 expr: expr EQ . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 119
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 77

   64 expr: expr NE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 120
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 78

   60 expr: expr BITWISE_XOR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 121
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 79

   69 expr: expr LOGICAL_AND . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 122
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 80

   70 expr: expr LOGICAL_OR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 123
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 81

    9 stmt: expr SEMI_COLON .

    $default  reduce using rule 9 (stmt)


State 82

   81 attr: attr POINTER . attr

    IDENTIFIER  shift, and go to state 124

    attr  go to state 125


State 83

   75 expr: attr ASSIGN . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 126
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 84

   43 commands: INCLUDE STRING SEMI_COLON .

    $default  reduce using rule 43 (commands)


State 85

   11 conditional: IF OPEN_PAREN condexpr . CLOSE_PAREN stmt
   13            | IF OPEN_PAREN condexpr . CLOSE_PAREN stmt ELSE $@1 stmt

    CLOSE_PAREN  shift, and go to state 127


State 86

   15 condexpr: expr .
   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 15 (condexpr)


State 87

   45 commands: ENUM IDENTIFIER BLOCK_OPEN . idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 128

    idlist  go to state 129


State 88

   39 commands: RETURN optexpr SEMI_COLON .

    $default  reduce using rule 39 (commands)


State 89

   44 commands: STRUCT IDENTIFIER BLOCK_OPEN . varlist BLOCK_CLOSE

    $default  reduce using rule 47 (varlist)

    varlist  go to state 130


State 90

   24 repetition: FOR OPEN_PAREN optexpr . $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    $default  reduce using rule 21 ($@3)

    $@3  go to state 131


State 91

   14 conditional: SWITCH OPEN_PAREN condexpr . CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 132


State 92

   42 commands: TYPEDEF IDENTIFIER IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 133


State 93

   71 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce using rule 71 (expr)


State 94

   10 stmt: BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 10 (stmt)


State 95

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   88 exprvector: OPEN_BRACKET expr . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 134
    ADD            shift, and go to state 62
    SUB            shift, and go to state 63
    MUL            shift, and go to state 64
    DIV            shift, and go to state 65
    BITWISE_AND    shift, and go to state 66
    BITWISE_OR     shift, and go to state 67
    BITWISE_NOT    shift, and go to state 68
    MOD            shift, and go to state 69
    LEFT_SHIFT     shift, and go to state 70
    RIGHT_SHIFT    shift, and go to state 71
    LT             shift, and go to state 72
    GT             shift, and go to state 73
    LE             shift, and go to state 74
    GE             shift, and go to state 75
    EQ             shift, and go to state 76
    NE             shift, and go to state 77
    BITWISE_XOR    shift, and go to state 78
    LOGICAL_AND    shift, and go to state 79
    LOGICAL_OR     shift, and go to state 80


State 96

   33 termlist: termlist . COMMA term
   37 opttermlist: termlist .

    COMMA  shift, and go to state 135

    $default  reduce using rule 37 (opttermlist)


State 97

   78 term: IDENTIFIER OPEN_PAREN opttermlist . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 136


State 98

   34 termlist: term .

    $default  reduce using rule 34 (termlist)


State 99

   79 term: attr .
   81 attr: attr . POINTER attr

    POINTER  shift, and go to state 82

    $default  reduce using rule 79 (term)


State 100

   90 constvector: OPEN_BRACKET . INTEGER CLOSE_BRACKET

    INTEGER  shift, and go to state 137


State 101

   30 func: IDENTIFIER IDENTIFIER $@7 . OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_PAREN  shift, and go to state 138


State 102

   28 var: IDENTIFIER IDENTIFIER constvector .

    $default  reduce using rule 28 (var)


State 103

   20 repetition: $@2 WHILE OPEN_PAREN . repexpr CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    repexpr  go to state 139
    expr     go to state 140
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 104

   26 repetition: $@6 DO stmt . WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    WHILE  shift, and go to state 141


State 105

   52 expr: expr . ADD expr
   52     | expr ADD expr .
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 52 (expr)


State 106

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   53     | expr SUB expr .
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 53 (expr)


State 107

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   54     | expr MUL expr .
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 54 (expr)


State 108

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   55     | expr DIV expr .
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 55 (expr)


State 109

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   57     | expr BITWISE_AND expr .
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77

    $default  reduce using rule 57 (expr)


State 110

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   58     | expr BITWISE_OR expr .
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78

    $default  reduce using rule 58 (expr)


State 111

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   59     | expr BITWISE_NOT expr .
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 59 (expr)


State 112

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   56     | expr MOD expr .
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 56 (expr)


State 113

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   61     | expr LEFT_SHIFT expr .
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 61 (expr)


State 114

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   62     | expr RIGHT_SHIFT expr .
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 62 (expr)


State 115

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   65     | expr LT expr .
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 65 (expr)


State 116

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   66     | expr GT expr .
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 66 (expr)


State 117

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   67     | expr LE expr .
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 67 (expr)


State 118

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   68     | expr GE expr .
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 68 (expr)


State 119

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   63     | expr EQ expr .
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75

    $default  reduce using rule 63 (expr)


State 120

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   64     | expr NE expr .
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75

    $default  reduce using rule 64 (expr)


State 121

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   60     | expr BITWISE_XOR expr .
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77

    $default  reduce using rule 60 (expr)


State 122

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   69     | expr LOGICAL_AND expr .
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78

    $default  reduce using rule 69 (expr)


State 123

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   70     | expr LOGICAL_OR expr .

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79

    $default  reduce using rule 70 (expr)


State 124

   80 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55

    $default  reduce using rule 89 (exprvector)

    exprvector  go to state 58


State 125

   81 attr: attr . POINTER attr
   81     | attr POINTER attr .

    $default  reduce using rule 81 (attr)


State 126

   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr
   75     | attr ASSIGN expr .

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 75 (expr)


State 127

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN . stmt
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN . stmt ELSE $@1 stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 142
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 128

   48 idlist: IDENTIFIER . COMMA idlist
   49       | IDENTIFIER .

    COMMA  shift, and go to state 143

    $default  reduce using rule 49 (idlist)


State 129

   45 commands: ENUM IDENTIFIER BLOCK_OPEN idlist . BLOCK_CLOSE

    BLOCK_CLOSE  shift, and go to state 144


State 130

   44 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist . BLOCK_CLOSE
   46 varlist: varlist . var SEMI_COLON

    BLOCK_CLOSE  shift, and go to state 145
    IDENTIFIER   shift, and go to state 146

    var  go to state 147


State 131

   24 repetition: FOR OPEN_PAREN optexpr $@3 . SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    SEMI_COLON  shift, and go to state 148


State 132

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN . BLOCK_OPEN caselist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 149


State 133

   42 commands: TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON .

    $default  reduce using rule 42 (commands)


State 134

   88 exprvector: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 88 (exprvector)


State 135

   33 termlist: termlist COMMA . term

    DECIMAL     shift, and go to state 19
    STRING      shift, and go to state 20
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 22
    TRUE        shift, and go to state 23
    FALSE       shift, and go to state 24

    term     go to state 150
    attr     go to state 99
    const    go to state 36
    boolean  go to state 37


State 136

   78 term: IDENTIFIER OPEN_PAREN opttermlist CLOSE_PAREN .

    $default  reduce using rule 78 (term)


State 137

   90 constvector: OPEN_BRACKET INTEGER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 151


State 138

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN . opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 146

    $default  reduce using rule 36 (opttypelist)

    var          go to state 152
    typelist     go to state 153
    opttypelist  go to state 154


State 139

   20 repetition: $@2 WHILE OPEN_PAREN repexpr . CLOSE_PAREN stmt

    CLOSE_PAREN  shift, and go to state 155


State 140

   27 repexpr: expr .
   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 27 (repexpr)


State 141

   26 repetition: $@6 DO stmt WHILE . OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    OPEN_PAREN  shift, and go to state 156


State 142

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt .
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN stmt . ELSE $@1 stmt

    ELSE  shift, and go to state 157

    $default  reduce using rule 11 (conditional)


State 143

   48 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 128

    idlist  go to state 158


State 144

   45 commands: ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE .

    $default  reduce using rule 45 (commands)


State 145

   44 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE .

    $default  reduce using rule 44 (commands)


State 146

   28 var: IDENTIFIER . IDENTIFIER constvector

    IDENTIFIER  shift, and go to state 159


State 147

   46 varlist: varlist var . SEMI_COLON

    SEMI_COLON  shift, and go to state 160


State 148

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON . repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    repexpr  go to state 161
    expr     go to state 140
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 149

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN . caselist BLOCK_CLOSE

    $default  reduce using rule 18 (caselist)

    caselist  go to state 162


State 150

   33 termlist: termlist COMMA term .

    $default  reduce using rule 33 (termlist)


State 151

   90 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET .

    $default  reduce using rule 90 (constvector)


State 152

   32 typelist: var .

    $default  reduce using rule 32 (typelist)


State 153

   31 typelist: typelist . COMMA var
   35 opttypelist: typelist .

    COMMA  shift, and go to state 163

    $default  reduce using rule 35 (opttypelist)


State 154

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist . CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 164


State 155

   20 repetition: $@2 WHILE OPEN_PAREN repexpr CLOSE_PAREN . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 165
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 156

   26 repetition: $@6 DO stmt WHILE OPEN_PAREN . expr CLOSE_PAREN SEMI_COLON

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 166
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 157

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE . $@1 stmt

    $default  reduce using rule 12 ($@1)

    $@1  go to state 167


State 158

   48 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 48 (idlist)


State 159

   28 var: IDENTIFIER IDENTIFIER . constvector

    OPEN_BRACKET  shift, and go to state 100

    $default  reduce using rule 91 (constvector)

    constvector  go to state 102


State 160

   46 varlist: varlist var SEMI_COLON .

    $default  reduce using rule 46 (varlist)


State 161

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr . SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt

    SEMI_COLON  shift, and go to state 168


State 162

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist . BLOCK_CLOSE
   16 caselist: caselist . CASE term COLON stmts
   17         | caselist . DEFAULT COLON stmts

    CASE         shift, and go to state 169
    DEFAULT      shift, and go to state 170
    BLOCK_CLOSE  shift, and go to state 171


State 163

   31 typelist: typelist COMMA . var

    IDENTIFIER  shift, and go to state 146

    var  go to state 172


State 164

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN . BLOCK_OPEN stmts BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 173


State 165

   20 repetition: $@2 WHILE OPEN_PAREN repexpr CLOSE_PAREN stmt .

    $default  reduce using rule 20 (repetition)


State 166

   26 repetition: $@6 DO stmt WHILE OPEN_PAREN expr . CLOSE_PAREN SEMI_COLON
   52 expr: expr . ADD expr
   53     | expr . SUB expr
   54     | expr . MUL expr
   55     | expr . DIV expr
   56     | expr . MOD expr
   57     | expr . BITWISE_AND expr
   58     | expr . BITWISE_OR expr
   59     | expr . BITWISE_NOT expr
   60     | expr . BITWISE_XOR expr
   61     | expr . LEFT_SHIFT expr
   62     | expr . RIGHT_SHIFT expr
   63     | expr . EQ expr
   64     | expr . NE expr
   65     | expr . LT expr
   66     | expr . GT expr
   67     | expr . LE expr
   68     | expr . GE expr
   69     | expr . LOGICAL_AND expr
   70     | expr . LOGICAL_OR expr

    CLOSE_PAREN  shift, and go to state 174
    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80


State 167

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 175
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 168

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON . $@4 optexpr $@5 CLOSE_PAREN stmt

    $default  reduce using rule 22 ($@4)

    $@4  go to state 176


State 169

   16 caselist: caselist CASE . term COLON stmts

    DECIMAL     shift, and go to state 19
    STRING      shift, and go to state 20
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 22
    TRUE        shift, and go to state 23
    FALSE       shift, and go to state 24

    term     go to state 177
    attr     go to state 99
    const    go to state 36
    boolean  go to state 37


State 170

   17 caselist: caselist DEFAULT . COLON stmts

    COLON  shift, and go to state 178


State 171

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE .

    $default  reduce using rule 14 (conditional)


State 172

   31 typelist: typelist COMMA var .

    $default  reduce using rule 31 (typelist)


State 173

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 179


State 174

   26 repetition: $@6 DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN . SEMI_COLON

    SEMI_COLON  shift, and go to state 180


State 175

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt .

    $default  reduce using rule 13 (conditional)


State 176

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 . optexpr $@5 CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 51 (optexpr)

    optexpr  go to state 181
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 177

   16 caselist: caselist CASE term . COLON stmts

    COLON  shift, and go to state 182


State 178

   17 caselist: caselist DEFAULT COLON . stmts

    $default  reduce using rule 3 (stmts)

    stmts  go to state 183


State 179

    2 stmts: stmts . stmt
   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_CLOSE  shift, and go to state 184
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 180

   26 repetition: $@6 DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON .

    $default  reduce using rule 26 (repetition)


State 181

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr . $@5 CLOSE_PAREN stmt

    $default  reduce using rule 23 ($@5)

    $@5  go to state 185


State 182

   16 caselist: caselist CASE term COLON . stmts

    $default  reduce using rule 3 (stmts)

    stmts  go to state 186


State 183

    2 stmts: stmts . stmt
   17 caselist: caselist DEFAULT COLON stmts .

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    WHILE     reduce using rule 19 ($@2)
    $default  reduce using rule 17 (caselist)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 184

   30 func: IDENTIFIER IDENTIFIER $@7 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 30 (func)


State 185

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 . CLOSE_PAREN stmt

    CLOSE_PAREN  shift, and go to state 187


State 186

    2 stmts: stmts . stmt
   16 caselist: caselist CASE term COLON stmts .

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    WHILE     reduce using rule 19 ($@2)
    $default  reduce using rule 16 (caselist)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 187

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    SWITCH       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    DO        reduce using rule 25 ($@6)
    $default  reduce using rule 19 ($@2)

    stmt         go to state 188
    conditional  go to state 26
    repetition   go to state 27
    $@2          go to state 28
    $@6          go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 188

   24 repetition: FOR OPEN_PAREN optexpr $@3 SEMI_COLON repexpr SEMI_COLON $@4 optexpr $@5 CLOSE_PAREN stmt .

    $default  reduce using rule 24 (repetition)

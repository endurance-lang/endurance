Terminals unused in grammar

    MAIN
    CASE
    CONST
    DEFAULT
    PRINTF
    SCANF
    GOTO
    SWITCH
    UNION
    FREE
    SLICE
    SOME
    REDUCE
    FILTER
    MAP
    SORT
    COLON
    INVALID
    UMINUS
    DOT


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmts stmt
    3      | %empty

    4 stmt: conditional
    5     | repetition
    6     | func
    7     | var SEMI_COLON
    8     | commands
    9     | expr SEMI_COLON
   10     | BLOCK_OPEN stmts BLOCK_CLOSE

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt

   12 $@1: %empty

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

   14 condexpr: expr

   15 $@2: %empty

   16 $@3: %empty

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

   18 $@4: %empty

   19 $@5: %empty

   20 $@6: %empty

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

   22 $@7: %empty

   23 repetition: DO $@7 stmt WHILE OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON

   24 repexpr: expr

   25 var: IDENTIFIER IDENTIFIER constvector

   26 $@8: %empty

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

   28 typelist: typelist COMMA var
   29         | var

   30 exprlist: exprlist COMMA expr
   31         | expr

   32 opttypelist: typelist
   33            | %empty

   34 optexprlist: exprlist
   35            | %empty

   36 commands: RETURN optexpr SEMI_COLON
   37         | BREAK SEMI_COLON
   38         | CONTINUE SEMI_COLON
   39         | TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON
   40         | INCLUDE STRING SEMI_COLON
   41         | STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE
   42         | ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

   43 varlist: varlist var SEMI_COLON
   44        | %empty

   45 idlist: IDENTIFIER COMMA idlist
   46       | IDENTIFIER

   47 optexpr: expr
   48        | %empty

   49 expr: expr ADD expr
   50     | expr SUB expr
   51     | expr MUL expr
   52     | expr DIV expr
   53     | expr MOD expr
   54     | expr BITWISE_AND expr
   55     | expr BITWISE_OR expr
   56     | expr BITWISE_NOT expr
   57     | expr BITWISE_XOR expr
   58     | expr LEFT_SHIFT expr
   59     | expr RIGHT_SHIFT expr
   60     | expr EQ expr
   61     | expr NE expr
   62     | expr LT expr
   63     | expr GT expr
   64     | expr LE expr
   65     | expr GE expr
   66     | expr LOGICAL_AND expr
   67     | expr LOGICAL_OR expr
   68     | OPEN_PAREN expr CLOSE_PAREN
   69     | LOGICAL_NOT expr
   70     | SUB expr
   71     | term
   72     | attr ASSIGN expr
   73     | SIZEOF IDENTIFIER

   74 term: const
   75     | IDENTIFIER OPEN_PAREN optexprlist CLOSE_PAREN
   76     | attr

   77 attr: IDENTIFIER exprvector
   78     | attr POINTER attr

   79 const: INTEGER
   80      | DECIMAL
   81      | STRING
   82      | boolean

   83 boolean: TRUE
   84        | FALSE

   85 exprvector: OPEN_BRACKET expr CLOSE_BRACKET
   86           | %empty

   87 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET
   88            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE (258) 40
    MAIN (259)
    BREAK (260) 37
    CASE (261)
    CONST (262)
    CONTINUE (263) 38
    DEFAULT (264)
    IF (265) 11 13
    ELSE (266) 13
    ENUM (267) 42
    RETURN (268) 36
    STRUCT (269) 41
    DO (270) 23
    PRINTF (271)
    SCANF (272)
    FOR (273) 21
    GOTO (274)
    SIZEOF (275) 73
    SWITCH (276)
    TYPEDEF (277) 39
    UNION (278)
    WHILE (279) 17 23
    FREE (280)
    POINTER (281) 78
    SLICE (282)
    SOME (283)
    REDUCE (284)
    FILTER (285)
    MAP (286)
    SORT (287)
    CLOSE_BRACKET (288) 85 87
    OPEN_BRACKET (289) 85 87
    CLOSE_PAREN (290) 11 13 17 21 23 27 68 75
    OPEN_PAREN (291) 11 13 17 21 23 27 68 75
    BLOCK_CLOSE (292) 10 27 41 42
    BLOCK_OPEN (293) 10 27 41 42
    ADD (294) 49
    SUB (295) 50 70
    MUL (296) 51
    DIV (297) 52
    BITWISE_AND (298) 54
    BITWISE_OR (299) 55
    BITWISE_NOT (300) 56
    MOD (301) 53
    LEFT_SHIFT (302) 58
    RIGHT_SHIFT (303) 59
    LT (304) 62
    GT (305) 63
    LE (306) 64
    GE (307) 65
    EQ (308) 60
    NE (309) 61
    BITWISE_XOR (310) 57
    LOGICAL_AND (311) 66
    LOGICAL_OR (312) 67
    LOGICAL_NOT (313) 69
    COLON (314)
    SEMI_COLON (315) 7 9 21 23 36 37 38 39 40 43
    ASSIGN (316) 72
    COMMA (317) 28 30 45
    INVALID (318)
    UMINUS (319)
    DECIMAL (320) 80
    STRING (321) 40 81
    DOT (322)
    IDENTIFIER <string> (323) 25 27 39 41 42 45 46 73 75 77
    INTEGER <integer> (324) 79 87
    TRUE <boolean> (325) 83
    FALSE <boolean> (326) 84
    IFX (327)
    UNARY (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    program (75)
        on left: 1
        on right: 0
    stmts (76)
        on left: 2 3
        on right: 1 2 10 27
    stmt (77)
        on left: 4 5 6 7 8 9 10
        on right: 2 11 13 17 21 23
    conditional (78)
        on left: 11 13
        on right: 4
    $@1 (79)
        on left: 12
        on right: 13
    condexpr (80)
        on left: 14
        on right: 11 13
    repetition (81)
        on left: 17 21 23
        on right: 5
    $@2 (82)
        on left: 15
        on right: 17
    $@3 (83)
        on left: 16
        on right: 17
    $@4 (84)
        on left: 18
        on right: 21
    $@5 (85)
        on left: 19
        on right: 21
    $@6 (86)
        on left: 20
        on right: 21
    $@7 (87)
        on left: 22
        on right: 23
    repexpr (88)
        on left: 24
        on right: 17 21 23
    var (89)
        on left: 25
        on right: 7 28 29 43
    func (90)
        on left: 27
        on right: 6
    $@8 (91)
        on left: 26
        on right: 27
    typelist (92)
        on left: 28 29
        on right: 28 32
    exprlist <paramList> (93)
        on left: 30 31
        on right: 30 34
    opttypelist (94)
        on left: 32 33
        on right: 27
    optexprlist <paramList> (95)
        on left: 34 35
        on right: 75
    commands (96)
        on left: 36 37 38 39 40 41 42
        on right: 8
    varlist (97)
        on left: 43 44
        on right: 41 43
    idlist (98)
        on left: 45 46
        on right: 42 45
    optexpr (99)
        on left: 47 48
        on right: 21 36
    expr <exprData> (100)
        on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
        on right: 9 14 24 30 31 47 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 85
    term <exprData> (101)
        on left: 74 75 76
        on right: 71
    attr <string> (102)
        on left: 77 78
        on right: 72 76 78
    const <exprData> (103)
        on left: 79 80 81 82
        on right: 74
    boolean <boolean> (104)
        on left: 83 84
        on right: 82
    exprvector <exprData> (105)
        on left: 85 86
        on right: 77
    constvector <integer> (106)
        on left: 87 88
        on right: 25


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (stmts)

    program  go to state 1
    stmts    go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts .
    2 stmts: stmts . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    $default  reduce using rule 1 (program)

    stmt         go to state 26
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 3

    0 $accept: program $end .

    $default  accept


State 4

   40 commands: INCLUDE . STRING SEMI_COLON

    STRING  shift, and go to state 37


State 5

   37 commands: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 38


State 6

   38 commands: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 39


State 7

   11 conditional: IF . OPEN_PAREN condexpr CLOSE_PAREN stmt
   13            | IF . OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    OPEN_PAREN  shift, and go to state 40


State 8

   42 commands: ENUM . IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 41


State 9

   36 commands: RETURN . optexpr SEMI_COLON

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    $default  reduce using rule 48 (optexpr)

    optexpr  go to state 43
    expr     go to state 44
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 10

   41 commands: STRUCT . IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 45


State 11

   23 repetition: DO . $@7 stmt WHILE OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON

    $default  reduce using rule 22 ($@7)

    $@7  go to state 46


State 12

   21 repetition: FOR . OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    OPEN_PAREN  shift, and go to state 47


State 13

   73 expr: SIZEOF . IDENTIFIER

    IDENTIFIER  shift, and go to state 48


State 14

   39 commands: TYPEDEF . IDENTIFIER IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 49


State 15

   17 repetition: WHILE . $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

    $default  reduce using rule 15 ($@2)

    $@2  go to state 50


State 16

   68 expr: OPEN_PAREN . expr CLOSE_PAREN

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 51
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 17

   10 stmt: BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 52


State 18

   70 expr: SUB . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 53
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 19

   69 expr: LOGICAL_NOT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 54
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 20

   80 const: DECIMAL .

    $default  reduce using rule 80 (const)


State 21

   81 const: STRING .

    $default  reduce using rule 81 (const)


State 22

   25 var: IDENTIFIER . IDENTIFIER constvector
   27 func: IDENTIFIER . IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE
   75 term: IDENTIFIER . OPEN_PAREN optexprlist CLOSE_PAREN
   77 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55
    OPEN_PAREN    shift, and go to state 56
    IDENTIFIER    shift, and go to state 57

    $default  reduce using rule 86 (exprvector)

    exprvector  go to state 58


State 23

   79 const: INTEGER .

    $default  reduce using rule 79 (const)


State 24

   83 boolean: TRUE .

    $default  reduce using rule 83 (boolean)


State 25

   84 boolean: FALSE .

    $default  reduce using rule 84 (boolean)


State 26

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


State 27

    4 stmt: conditional .

    $default  reduce using rule 4 (stmt)


State 28

    5 stmt: repetition .

    $default  reduce using rule 5 (stmt)


State 29

    7 stmt: var . SEMI_COLON

    SEMI_COLON  shift, and go to state 59


State 30

    6 stmt: func .

    $default  reduce using rule 6 (stmt)


State 31

    8 stmt: commands .

    $default  reduce using rule 8 (stmt)


State 32

    9 stmt: expr . SEMI_COLON
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78
    SEMI_COLON   shift, and go to state 79


State 33

   71 expr: term .

    $default  reduce using rule 71 (expr)


State 34

   72 expr: attr . ASSIGN expr
   76 term: attr .
   78 attr: attr . POINTER attr

    POINTER  shift, and go to state 80
    ASSIGN   shift, and go to state 81

    $default  reduce using rule 76 (term)


State 35

   74 term: const .

    $default  reduce using rule 74 (term)


State 36

   82 const: boolean .

    $default  reduce using rule 82 (const)


State 37

   40 commands: INCLUDE STRING . SEMI_COLON

    SEMI_COLON  shift, and go to state 82


State 38

   37 commands: BREAK SEMI_COLON .

    $default  reduce using rule 37 (commands)


State 39

   38 commands: CONTINUE SEMI_COLON .

    $default  reduce using rule 38 (commands)


State 40

   11 conditional: IF OPEN_PAREN . condexpr CLOSE_PAREN stmt
   13            | IF OPEN_PAREN . condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    condexpr  go to state 83
    expr      go to state 84
    term      go to state 33
    attr      go to state 34
    const     go to state 35
    boolean   go to state 36


State 41

   42 commands: ENUM IDENTIFIER . BLOCK_OPEN idlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 85


State 42

   75 term: IDENTIFIER . OPEN_PAREN optexprlist CLOSE_PAREN
   77 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55
    OPEN_PAREN    shift, and go to state 56

    $default  reduce using rule 86 (exprvector)

    exprvector  go to state 58


State 43

   36 commands: RETURN optexpr . SEMI_COLON

    SEMI_COLON  shift, and go to state 86


State 44

   47 optexpr: expr .
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 47 (optexpr)


State 45

   41 commands: STRUCT IDENTIFIER . BLOCK_OPEN varlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 87


State 46

   23 repetition: DO $@7 . stmt WHILE OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 88
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 47

   21 repetition: FOR OPEN_PAREN . optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    $default  reduce using rule 48 (optexpr)

    optexpr  go to state 89
    expr     go to state 44
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 48

   73 expr: SIZEOF IDENTIFIER .

    $default  reduce using rule 73 (expr)


State 49

   39 commands: TYPEDEF IDENTIFIER . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 90


State 50

   17 repetition: WHILE $@2 . OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

    OPEN_PAREN  shift, and go to state 91


State 51

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   68     | OPEN_PAREN expr . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 92
    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78


State 52

    2 stmts: stmts . stmt
   10 stmt: BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_CLOSE  shift, and go to state 93
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 26
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 53

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   70     | SUB expr .

    $default  reduce using rule 70 (expr)


State 54

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   69     | LOGICAL_NOT expr .

    $default  reduce using rule 69 (expr)


State 55

   85 exprvector: OPEN_BRACKET . expr CLOSE_BRACKET

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 94
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 56

   75 term: IDENTIFIER OPEN_PAREN . optexprlist CLOSE_PAREN

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    $default  reduce using rule 35 (optexprlist)

    exprlist     go to state 95
    optexprlist  go to state 96
    expr         go to state 97
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 57

   25 var: IDENTIFIER IDENTIFIER . constvector
   27 func: IDENTIFIER IDENTIFIER . $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_BRACKET  shift, and go to state 98

    SEMI_COLON  reduce using rule 88 (constvector)
    $default    reduce using rule 26 ($@8)

    $@8          go to state 99
    constvector  go to state 100


State 58

   77 attr: IDENTIFIER exprvector .

    $default  reduce using rule 77 (attr)


State 59

    7 stmt: var SEMI_COLON .

    $default  reduce using rule 7 (stmt)


State 60

   49 expr: expr ADD . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 101
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 61

   50 expr: expr SUB . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 102
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 62

   51 expr: expr MUL . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 103
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 63

   52 expr: expr DIV . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 104
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 64

   54 expr: expr BITWISE_AND . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 105
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 65

   55 expr: expr BITWISE_OR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 106
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 66

   56 expr: expr BITWISE_NOT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 107
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 67

   53 expr: expr MOD . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 108
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 68

   58 expr: expr LEFT_SHIFT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 109
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 69

   59 expr: expr RIGHT_SHIFT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 110
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 70

   62 expr: expr LT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 111
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 71

   63 expr: expr GT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 112
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 72

   64 expr: expr LE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 113
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 73

   65 expr: expr GE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 114
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 74

   60 expr: expr EQ . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 115
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 75

   61 expr: expr NE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 116
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 76

   57 expr: expr BITWISE_XOR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 117
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 77

   66 expr: expr LOGICAL_AND . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 118
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 78

   67 expr: expr LOGICAL_OR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 119
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 79

    9 stmt: expr SEMI_COLON .

    $default  reduce using rule 9 (stmt)


State 80

   78 attr: attr POINTER . attr

    IDENTIFIER  shift, and go to state 120

    attr  go to state 121


State 81

   72 expr: attr ASSIGN . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 122
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 82

   40 commands: INCLUDE STRING SEMI_COLON .

    $default  reduce using rule 40 (commands)


State 83

   11 conditional: IF OPEN_PAREN condexpr . CLOSE_PAREN stmt
   13            | IF OPEN_PAREN condexpr . CLOSE_PAREN stmt ELSE $@1 stmt

    CLOSE_PAREN  shift, and go to state 123


State 84

   14 condexpr: expr .
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 14 (condexpr)


State 85

   42 commands: ENUM IDENTIFIER BLOCK_OPEN . idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 124

    idlist  go to state 125


State 86

   36 commands: RETURN optexpr SEMI_COLON .

    $default  reduce using rule 36 (commands)


State 87

   41 commands: STRUCT IDENTIFIER BLOCK_OPEN . varlist BLOCK_CLOSE

    $default  reduce using rule 44 (varlist)

    varlist  go to state 126


State 88

   23 repetition: DO $@7 stmt . WHILE OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON

    WHILE  shift, and go to state 127


State 89

   21 repetition: FOR OPEN_PAREN optexpr . $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    $default  reduce using rule 18 ($@4)

    $@4  go to state 128


State 90

   39 commands: TYPEDEF IDENTIFIER IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 129


State 91

   17 repetition: WHILE $@2 OPEN_PAREN . repexpr CLOSE_PAREN $@3 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    repexpr  go to state 130
    expr     go to state 131
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 92

   68 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce using rule 68 (expr)


State 93

   10 stmt: BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 10 (stmt)


State 94

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   85 exprvector: OPEN_BRACKET expr . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 132
    ADD            shift, and go to state 60
    SUB            shift, and go to state 61
    MUL            shift, and go to state 62
    DIV            shift, and go to state 63
    BITWISE_AND    shift, and go to state 64
    BITWISE_OR     shift, and go to state 65
    BITWISE_NOT    shift, and go to state 66
    MOD            shift, and go to state 67
    LEFT_SHIFT     shift, and go to state 68
    RIGHT_SHIFT    shift, and go to state 69
    LT             shift, and go to state 70
    GT             shift, and go to state 71
    LE             shift, and go to state 72
    GE             shift, and go to state 73
    EQ             shift, and go to state 74
    NE             shift, and go to state 75
    BITWISE_XOR    shift, and go to state 76
    LOGICAL_AND    shift, and go to state 77
    LOGICAL_OR     shift, and go to state 78


State 95

   30 exprlist: exprlist . COMMA expr
   34 optexprlist: exprlist .

    COMMA  shift, and go to state 133

    $default  reduce using rule 34 (optexprlist)


State 96

   75 term: IDENTIFIER OPEN_PAREN optexprlist . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 134


State 97

   31 exprlist: expr .
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 31 (exprlist)


State 98

   87 constvector: OPEN_BRACKET . INTEGER CLOSE_BRACKET

    INTEGER  shift, and go to state 135


State 99

   27 func: IDENTIFIER IDENTIFIER $@8 . OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_PAREN  shift, and go to state 136


State 100

   25 var: IDENTIFIER IDENTIFIER constvector .

    $default  reduce using rule 25 (var)


State 101

   49 expr: expr . ADD expr
   49     | expr ADD expr .
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67

    $default  reduce using rule 49 (expr)


State 102

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   50     | expr SUB expr .
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67

    $default  reduce using rule 50 (expr)


State 103

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   51     | expr MUL expr .
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 66

    $default  reduce using rule 51 (expr)


State 104

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   52     | expr DIV expr .
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 66

    $default  reduce using rule 52 (expr)


State 105

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   54     | expr BITWISE_AND expr .
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75

    $default  reduce using rule 54 (expr)


State 106

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   55     | expr BITWISE_OR expr .
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76

    $default  reduce using rule 55 (expr)


State 107

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   56     | expr BITWISE_NOT expr .
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 66

    $default  reduce using rule 56 (expr)


State 108

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   53     | expr MOD expr .
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 66

    $default  reduce using rule 53 (expr)


State 109

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   58     | expr LEFT_SHIFT expr .
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67

    $default  reduce using rule 58 (expr)


State 110

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   59     | expr RIGHT_SHIFT expr .
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67

    $default  reduce using rule 59 (expr)


State 111

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   62     | expr LT expr .
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69

    $default  reduce using rule 62 (expr)


State 112

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   63     | expr GT expr .
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69

    $default  reduce using rule 63 (expr)


State 113

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   64     | expr LE expr .
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69

    $default  reduce using rule 64 (expr)


State 114

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   65     | expr GE expr .
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69

    $default  reduce using rule 65 (expr)


State 115

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   60     | expr EQ expr .
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73

    $default  reduce using rule 60 (expr)


State 116

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   61     | expr NE expr .
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73

    $default  reduce using rule 61 (expr)


State 117

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   57     | expr BITWISE_XOR expr .
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75

    $default  reduce using rule 57 (expr)


State 118

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   66     | expr LOGICAL_AND expr .
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76

    $default  reduce using rule 66 (expr)


State 119

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   67     | expr LOGICAL_OR expr .

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77

    $default  reduce using rule 67 (expr)


State 120

   77 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 55

    $default  reduce using rule 86 (exprvector)

    exprvector  go to state 58


State 121

   78 attr: attr . POINTER attr
   78     | attr POINTER attr .

    $default  reduce using rule 78 (attr)


State 122

   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr
   72     | attr ASSIGN expr .

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 72 (expr)


State 123

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN . stmt
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN . stmt ELSE $@1 stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 137
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 124

   45 idlist: IDENTIFIER . COMMA idlist
   46       | IDENTIFIER .

    COMMA  shift, and go to state 138

    $default  reduce using rule 46 (idlist)


State 125

   42 commands: ENUM IDENTIFIER BLOCK_OPEN idlist . BLOCK_CLOSE

    BLOCK_CLOSE  shift, and go to state 139


State 126

   41 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist . BLOCK_CLOSE
   43 varlist: varlist . var SEMI_COLON

    BLOCK_CLOSE  shift, and go to state 140
    IDENTIFIER   shift, and go to state 141

    var  go to state 142


State 127

   23 repetition: DO $@7 stmt WHILE . OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON

    OPEN_PAREN  shift, and go to state 143


State 128

   21 repetition: FOR OPEN_PAREN optexpr $@4 . SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SEMI_COLON  shift, and go to state 144


State 129

   39 commands: TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON .

    $default  reduce using rule 39 (commands)


State 130

   17 repetition: WHILE $@2 OPEN_PAREN repexpr . CLOSE_PAREN $@3 stmt

    CLOSE_PAREN  shift, and go to state 145


State 131

   24 repexpr: expr .
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 24 (repexpr)


State 132

   85 exprvector: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 85 (exprvector)


State 133

   30 exprlist: exprlist COMMA . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    expr     go to state 146
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 134

   75 term: IDENTIFIER OPEN_PAREN optexprlist CLOSE_PAREN .

    $default  reduce using rule 75 (term)


State 135

   87 constvector: OPEN_BRACKET INTEGER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 147


State 136

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN . opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 141

    $default  reduce using rule 33 (opttypelist)

    var          go to state 148
    typelist     go to state 149
    opttypelist  go to state 150


State 137

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt .
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN stmt . ELSE $@1 stmt

    ELSE  shift, and go to state 151

    $default  reduce using rule 11 (conditional)


State 138

   45 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 124

    idlist  go to state 152


State 139

   42 commands: ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE .

    $default  reduce using rule 42 (commands)


State 140

   41 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE .

    $default  reduce using rule 41 (commands)


State 141

   25 var: IDENTIFIER . IDENTIFIER constvector

    IDENTIFIER  shift, and go to state 153


State 142

   43 varlist: varlist var . SEMI_COLON

    SEMI_COLON  shift, and go to state 154


State 143

   23 repetition: DO $@7 stmt WHILE OPEN_PAREN . repexpr CLOSE_PAREN SEMI_COLON

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    repexpr  go to state 155
    expr     go to state 131
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 144

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON . repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    repexpr  go to state 156
    expr     go to state 131
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 145

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN . $@3 stmt

    $default  reduce using rule 16 ($@3)

    $@3  go to state 157


State 146

   30 exprlist: exprlist COMMA expr .
   49 expr: expr . ADD expr
   50     | expr . SUB expr
   51     | expr . MUL expr
   52     | expr . DIV expr
   53     | expr . MOD expr
   54     | expr . BITWISE_AND expr
   55     | expr . BITWISE_OR expr
   56     | expr . BITWISE_NOT expr
   57     | expr . BITWISE_XOR expr
   58     | expr . LEFT_SHIFT expr
   59     | expr . RIGHT_SHIFT expr
   60     | expr . EQ expr
   61     | expr . NE expr
   62     | expr . LT expr
   63     | expr . GT expr
   64     | expr . LE expr
   65     | expr . GE expr
   66     | expr . LOGICAL_AND expr
   67     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 60
    SUB          shift, and go to state 61
    MUL          shift, and go to state 62
    DIV          shift, and go to state 63
    BITWISE_AND  shift, and go to state 64
    BITWISE_OR   shift, and go to state 65
    BITWISE_NOT  shift, and go to state 66
    MOD          shift, and go to state 67
    LEFT_SHIFT   shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LT           shift, and go to state 70
    GT           shift, and go to state 71
    LE           shift, and go to state 72
    GE           shift, and go to state 73
    EQ           shift, and go to state 74
    NE           shift, and go to state 75
    BITWISE_XOR  shift, and go to state 76
    LOGICAL_AND  shift, and go to state 77
    LOGICAL_OR   shift, and go to state 78

    $default  reduce using rule 30 (exprlist)


State 147

   87 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET .

    $default  reduce using rule 87 (constvector)


State 148

   29 typelist: var .

    $default  reduce using rule 29 (typelist)


State 149

   28 typelist: typelist . COMMA var
   32 opttypelist: typelist .

    COMMA  shift, and go to state 158

    $default  reduce using rule 32 (opttypelist)


State 150

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist . CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 159


State 151

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE . $@1 stmt

    $default  reduce using rule 12 ($@1)

    $@1  go to state 160


State 152

   45 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 45 (idlist)


State 153

   25 var: IDENTIFIER IDENTIFIER . constvector

    OPEN_BRACKET  shift, and go to state 98

    $default  reduce using rule 88 (constvector)

    constvector  go to state 100


State 154

   43 varlist: varlist var SEMI_COLON .

    $default  reduce using rule 43 (varlist)


State 155

   23 repetition: DO $@7 stmt WHILE OPEN_PAREN repexpr . CLOSE_PAREN SEMI_COLON

    CLOSE_PAREN  shift, and go to state 161


State 156

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr . SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SEMI_COLON  shift, and go to state 162


State 157

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 163
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 158

   28 typelist: typelist COMMA . var

    IDENTIFIER  shift, and go to state 141

    var  go to state 164


State 159

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN . BLOCK_OPEN stmts BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 165


State 160

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 166
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 161

   23 repetition: DO $@7 stmt WHILE OPEN_PAREN repexpr CLOSE_PAREN . SEMI_COLON

    SEMI_COLON  shift, and go to state 167


State 162

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON . $@5 optexpr CLOSE_PAREN $@6 stmt

    $default  reduce using rule 19 ($@5)

    $@5  go to state 168


State 163

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt .

    $default  reduce using rule 17 (repetition)


State 164

   28 typelist: typelist COMMA var .

    $default  reduce using rule 28 (typelist)


State 165

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 169


State 166

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt .

    $default  reduce using rule 13 (conditional)


State 167

   23 repetition: DO $@7 stmt WHILE OPEN_PAREN repexpr CLOSE_PAREN SEMI_COLON .

    $default  reduce using rule 23 (repetition)


State 168

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 . optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 16
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 42
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    $default  reduce using rule 48 (optexpr)

    optexpr  go to state 170
    expr     go to state 44
    term     go to state 33
    attr     go to state 34
    const    go to state 35
    boolean  go to state 36


State 169

    2 stmts: stmts . stmt
   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_CLOSE  shift, and go to state 171
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 26
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 170

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr . CLOSE_PAREN $@6 stmt

    CLOSE_PAREN  shift, and go to state 172


State 171

   27 func: IDENTIFIER IDENTIFIER $@8 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 27 (func)


State 172

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN . $@6 stmt

    $default  reduce using rule 20 ($@6)

    $@6  go to state 173


State 173

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    TYPEDEF      shift, and go to state 14
    WHILE        shift, and go to state 15
    OPEN_PAREN   shift, and go to state 16
    BLOCK_OPEN   shift, and go to state 17
    SUB          shift, and go to state 18
    LOGICAL_NOT  shift, and go to state 19
    DECIMAL      shift, and go to state 20
    STRING       shift, and go to state 21
    IDENTIFIER   shift, and go to state 22
    INTEGER      shift, and go to state 23
    TRUE         shift, and go to state 24
    FALSE        shift, and go to state 25

    stmt         go to state 174
    conditional  go to state 27
    repetition   go to state 28
    var          go to state 29
    func         go to state 30
    commands     go to state 31
    expr         go to state 32
    term         go to state 33
    attr         go to state 34
    const        go to state 35
    boolean      go to state 36


State 174

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt .

    $default  reduce using rule 21 (repetition)

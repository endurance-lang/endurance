Terminals unused in grammar

    MAIN
    CONST
    PRINTF
    SCANF
    GOTO
    UNION
    FREE
    SLICE
    SOME
    REDUCE
    FILTER
    MAP
    SORT
    INVALID
    UMINUS
    DOT


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmts stmt
    3      | %empty

    4 stmt: conditional
    5     | repetition
    6     | func
    7     | var SEMI_COLON
    8     | commands
    9     | expr SEMI_COLON
   10     | BLOCK_OPEN stmts BLOCK_CLOSE

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt

   12 $@1: %empty

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt
   14            | SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

   15 condexpr: expr

   16 caselist: caselist CASE term COLON stmts
   17         | caselist DEFAULT COLON stmts
   18         | %empty

   19 repetition: WHILE OPEN_PAREN repexpr CLOSE_PAREN stmt
   20           | FOR OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN stmt
   21           | DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

   22 $@2: %empty

   23 repexpr: $@2 expr

   24 var: IDENTIFIER IDENTIFIER constvector

   25 $@3: %empty

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

   27 typelist: typelist COMMA var
   28         | var

   29 termlist: termlist COMMA term
   30         | term

   31 opttypelist: typelist
   32            | %empty

   33 opttermlist: termlist
   34            | %empty

   35 commands: RETURN optexpr SEMI_COLON
   36         | BREAK SEMI_COLON
   37         | CONTINUE SEMI_COLON
   38         | TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON
   39         | INCLUDE STRING SEMI_COLON
   40         | STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE
   41         | ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

   42 varlist: varlist var SEMI_COLON
   43        | %empty

   44 idlist: IDENTIFIER COMMA idlist
   45       | IDENTIFIER

   46 optexpr: expr
   47        | %empty

   48 expr: expr ADD expr
   49     | expr SUB expr
   50     | expr MUL expr
   51     | expr DIV expr
   52     | expr MOD expr
   53     | expr BITWISE_AND expr
   54     | expr BITWISE_OR expr
   55     | expr BITWISE_NOT expr
   56     | expr BITWISE_XOR expr
   57     | expr LEFT_SHIFT expr
   58     | expr RIGHT_SHIFT expr
   59     | expr EQ expr
   60     | expr NE expr
   61     | expr LT expr
   62     | expr GT expr
   63     | expr LE expr
   64     | expr GE expr
   65     | expr LOGICAL_AND expr
   66     | expr LOGICAL_OR expr
   67     | OPEN_PAREN expr CLOSE_PAREN
   68     | LOGICAL_NOT expr
   69     | SUB expr
   70     | term
   71     | attr ASSIGN expr
   72     | SIZEOF IDENTIFIER

   73 term: const
   74     | IDENTIFIER OPEN_PAREN opttermlist CLOSE_PAREN
   75     | attr

   76 attr: IDENTIFIER exprvector
   77     | attr POINTER attr

   78 const: INTEGER
   79      | DECIMAL
   80      | STRING
   81      | boolean

   82 boolean: TRUE
   83        | FALSE

   84 exprvector: OPEN_BRACKET expr CLOSE_BRACKET
   85           | %empty

   86 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET
   87            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE (258) 39
    MAIN (259)
    BREAK (260) 36
    CASE (261) 16
    CONST (262)
    CONTINUE (263) 37
    DEFAULT (264) 17
    IF (265) 11 13
    ELSE (266) 13
    ENUM (267) 41
    RETURN (268) 35
    STRUCT (269) 40
    DO (270) 21
    PRINTF (271)
    SCANF (272)
    FOR (273) 20
    GOTO (274)
    SIZEOF (275) 72
    SWITCH (276) 14
    TYPEDEF (277) 38
    UNION (278)
    WHILE (279) 19 21
    FREE (280)
    POINTER (281) 77
    SLICE (282)
    SOME (283)
    REDUCE (284)
    FILTER (285)
    MAP (286)
    SORT (287)
    CLOSE_BRACKET (288) 84 86
    OPEN_BRACKET (289) 84 86
    CLOSE_PAREN (290) 11 13 14 19 20 21 26 67 74
    OPEN_PAREN (291) 11 13 14 19 20 21 26 67 74
    BLOCK_CLOSE (292) 10 14 26 40 41
    BLOCK_OPEN (293) 10 14 26 40 41
    ADD (294) 48
    SUB (295) 49 69
    MUL (296) 50
    DIV (297) 51
    BITWISE_AND (298) 53
    BITWISE_OR (299) 54
    BITWISE_NOT (300) 55
    MOD (301) 52
    LEFT_SHIFT (302) 57
    RIGHT_SHIFT (303) 58
    LT (304) 61
    GT (305) 62
    LE (306) 63
    GE (307) 64
    EQ (308) 59
    NE (309) 60
    BITWISE_XOR (310) 56
    LOGICAL_AND (311) 65
    LOGICAL_OR (312) 66
    LOGICAL_NOT (313) 68
    COLON (314) 16 17
    SEMI_COLON (315) 7 9 20 21 35 36 37 38 39 42
    ASSIGN (316) 71
    COMMA (317) 27 29 44
    INVALID (318)
    UMINUS (319)
    DECIMAL (320) 79
    STRING (321) 39 80
    DOT (322)
    IDENTIFIER <string> (323) 24 26 38 40 41 44 45 72 74 76
    INTEGER <integer> (324) 78 86
    TRUE <boolean> (325) 82
    FALSE <boolean> (326) 83
    IFX (327)
    UNARY (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    program (75)
        on left: 1
        on right: 0
    stmts (76)
        on left: 2 3
        on right: 1 2 10 16 17 26
    stmt (77)
        on left: 4 5 6 7 8 9 10
        on right: 2 11 13 19 20 21
    conditional (78)
        on left: 11 13 14
        on right: 4
    $@1 (79)
        on left: 12
        on right: 13
    condexpr (80)
        on left: 15
        on right: 11 13 14
    caselist (81)
        on left: 16 17 18
        on right: 14 16 17
    repetition (82)
        on left: 19 20 21
        on right: 5
    repexpr (83)
        on left: 23
        on right: 19
    $@2 (84)
        on left: 22
        on right: 23
    var (85)
        on left: 24
        on right: 7 27 28 42
    func (86)
        on left: 26
        on right: 6
    $@3 (87)
        on left: 25
        on right: 26
    typelist (88)
        on left: 27 28
        on right: 27 31
    termlist (89)
        on left: 29 30
        on right: 29 33
    opttypelist (90)
        on left: 31 32
        on right: 26
    opttermlist (91)
        on left: 33 34
        on right: 74
    commands (92)
        on left: 35 36 37 38 39 40 41
        on right: 8
    varlist (93)
        on left: 42 43
        on right: 40 42
    idlist (94)
        on left: 44 45
        on right: 41 44
    optexpr (95)
        on left: 46 47
        on right: 20 35
    expr <exprData> (96)
        on left: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
        on right: 9 15 21 23 46 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 71 84
    term <exprData> (97)
        on left: 73 74 75
        on right: 16 29 30 70
    attr <string> (98)
        on left: 76 77
        on right: 71 75 77
    const <exprData> (99)
        on left: 78 79 80 81
        on right: 73
    boolean <boolean> (100)
        on left: 82 83
        on right: 81
    exprvector <exprData> (101)
        on left: 84 85
        on right: 76
    constvector <integer> (102)
        on left: 86 87
        on right: 24


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (stmts)

    program  go to state 1
    stmts    go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts .
    2 stmts: stmts . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 1 (program)

    stmt         go to state 27
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 3

    0 $accept: program $end .

    $default  accept


State 4

   39 commands: INCLUDE . STRING SEMI_COLON

    STRING  shift, and go to state 38


State 5

   36 commands: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 39


State 6

   37 commands: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 40


State 7

   11 conditional: IF . OPEN_PAREN condexpr CLOSE_PAREN stmt
   13            | IF . OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    OPEN_PAREN  shift, and go to state 41


State 8

   41 commands: ENUM . IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 42


State 9

   35 commands: RETURN . optexpr SEMI_COLON

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 47 (optexpr)

    optexpr  go to state 44
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 10

   40 commands: STRUCT . IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 46


State 11

   21 repetition: DO . stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 47
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 12

   20 repetition: FOR . OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN stmt

    OPEN_PAREN  shift, and go to state 48


State 13

   72 expr: SIZEOF . IDENTIFIER

    IDENTIFIER  shift, and go to state 49


State 14

   14 conditional: SWITCH . OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    OPEN_PAREN  shift, and go to state 50


State 15

   38 commands: TYPEDEF . IDENTIFIER IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 51


State 16

   19 repetition: WHILE . OPEN_PAREN repexpr CLOSE_PAREN stmt

    OPEN_PAREN  shift, and go to state 52


State 17

   67 expr: OPEN_PAREN . expr CLOSE_PAREN

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 53
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 18

   10 stmt: BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 54


State 19

   69 expr: SUB . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 55
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 20

   68 expr: LOGICAL_NOT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 56
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 21

   79 const: DECIMAL .

    $default  reduce using rule 79 (const)


State 22

   80 const: STRING .

    $default  reduce using rule 80 (const)


State 23

   24 var: IDENTIFIER . IDENTIFIER constvector
   26 func: IDENTIFIER . IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE
   74 term: IDENTIFIER . OPEN_PAREN opttermlist CLOSE_PAREN
   76 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    IDENTIFIER    shift, and go to state 59

    $default  reduce using rule 85 (exprvector)

    exprvector  go to state 60


State 24

   78 const: INTEGER .

    $default  reduce using rule 78 (const)


State 25

   82 boolean: TRUE .

    $default  reduce using rule 82 (boolean)


State 26

   83 boolean: FALSE .

    $default  reduce using rule 83 (boolean)


State 27

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


State 28

    4 stmt: conditional .

    $default  reduce using rule 4 (stmt)


State 29

    5 stmt: repetition .

    $default  reduce using rule 5 (stmt)


State 30

    7 stmt: var . SEMI_COLON

    SEMI_COLON  shift, and go to state 61


State 31

    6 stmt: func .

    $default  reduce using rule 6 (stmt)


State 32

    8 stmt: commands .

    $default  reduce using rule 8 (stmt)


State 33

    9 stmt: expr . SEMI_COLON
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    SEMI_COLON   shift, and go to state 81


State 34

   70 expr: term .

    $default  reduce using rule 70 (expr)


State 35

   71 expr: attr . ASSIGN expr
   75 term: attr .
   77 attr: attr . POINTER attr

    POINTER  shift, and go to state 82
    ASSIGN   shift, and go to state 83

    $default  reduce using rule 75 (term)


State 36

   73 term: const .

    $default  reduce using rule 73 (term)


State 37

   81 const: boolean .

    $default  reduce using rule 81 (const)


State 38

   39 commands: INCLUDE STRING . SEMI_COLON

    SEMI_COLON  shift, and go to state 84


State 39

   36 commands: BREAK SEMI_COLON .

    $default  reduce using rule 36 (commands)


State 40

   37 commands: CONTINUE SEMI_COLON .

    $default  reduce using rule 37 (commands)


State 41

   11 conditional: IF OPEN_PAREN . condexpr CLOSE_PAREN stmt
   13            | IF OPEN_PAREN . condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    condexpr  go to state 85
    expr      go to state 86
    term      go to state 34
    attr      go to state 35
    const     go to state 36
    boolean   go to state 37


State 42

   41 commands: ENUM IDENTIFIER . BLOCK_OPEN idlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 87


State 43

   74 term: IDENTIFIER . OPEN_PAREN opttermlist CLOSE_PAREN
   76 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58

    $default  reduce using rule 85 (exprvector)

    exprvector  go to state 60


State 44

   35 commands: RETURN optexpr . SEMI_COLON

    SEMI_COLON  shift, and go to state 88


State 45

   46 optexpr: expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 46 (optexpr)


State 46

   40 commands: STRUCT IDENTIFIER . BLOCK_OPEN varlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 89


State 47

   21 repetition: DO stmt . WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    WHILE  shift, and go to state 90


State 48

   20 repetition: FOR OPEN_PAREN . optexpr SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 47 (optexpr)

    optexpr  go to state 91
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 49

   72 expr: SIZEOF IDENTIFIER .

    $default  reduce using rule 72 (expr)


State 50

   14 conditional: SWITCH OPEN_PAREN . condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    condexpr  go to state 92
    expr      go to state 86
    term      go to state 34
    attr      go to state 35
    const     go to state 36
    boolean   go to state 37


State 51

   38 commands: TYPEDEF IDENTIFIER . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 93


State 52

   19 repetition: WHILE OPEN_PAREN . repexpr CLOSE_PAREN stmt

    $default  reduce using rule 22 ($@2)

    repexpr  go to state 94
    $@2      go to state 95


State 53

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   67     | OPEN_PAREN expr . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 96
    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80


State 54

    2 stmts: stmts . stmt
   10 stmt: BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_CLOSE  shift, and go to state 97
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 27
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 55

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   69     | SUB expr .

    $default  reduce using rule 69 (expr)


State 56

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   68     | LOGICAL_NOT expr .

    $default  reduce using rule 68 (expr)


State 57

   84 exprvector: OPEN_BRACKET . expr CLOSE_BRACKET

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 98
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 58

   74 term: IDENTIFIER OPEN_PAREN . opttermlist CLOSE_PAREN

    DECIMAL     shift, and go to state 21
    STRING      shift, and go to state 22
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 24
    TRUE        shift, and go to state 25
    FALSE       shift, and go to state 26

    $default  reduce using rule 34 (opttermlist)

    termlist     go to state 99
    opttermlist  go to state 100
    term         go to state 101
    attr         go to state 102
    const        go to state 36
    boolean      go to state 37


State 59

   24 var: IDENTIFIER IDENTIFIER . constvector
   26 func: IDENTIFIER IDENTIFIER . $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_BRACKET  shift, and go to state 103

    SEMI_COLON  reduce using rule 87 (constvector)
    $default    reduce using rule 25 ($@3)

    $@3          go to state 104
    constvector  go to state 105


State 60

   76 attr: IDENTIFIER exprvector .

    $default  reduce using rule 76 (attr)


State 61

    7 stmt: var SEMI_COLON .

    $default  reduce using rule 7 (stmt)


State 62

   48 expr: expr ADD . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 106
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 63

   49 expr: expr SUB . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 107
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 64

   50 expr: expr MUL . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 108
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 65

   51 expr: expr DIV . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 109
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 66

   53 expr: expr BITWISE_AND . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 110
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 67

   54 expr: expr BITWISE_OR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 111
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 68

   55 expr: expr BITWISE_NOT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 112
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 69

   52 expr: expr MOD . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 113
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 70

   57 expr: expr LEFT_SHIFT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 114
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 71

   58 expr: expr RIGHT_SHIFT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 115
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 72

   61 expr: expr LT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 116
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 73

   62 expr: expr GT . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 117
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 74

   63 expr: expr LE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 118
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 75

   64 expr: expr GE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 119
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 76

   59 expr: expr EQ . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 120
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 77

   60 expr: expr NE . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 121
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 78

   56 expr: expr BITWISE_XOR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 122
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 79

   65 expr: expr LOGICAL_AND . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 123
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 80

   66 expr: expr LOGICAL_OR . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 124
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 81

    9 stmt: expr SEMI_COLON .

    $default  reduce using rule 9 (stmt)


State 82

   77 attr: attr POINTER . attr

    IDENTIFIER  shift, and go to state 125

    attr  go to state 126


State 83

   71 expr: attr ASSIGN . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 127
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 84

   39 commands: INCLUDE STRING SEMI_COLON .

    $default  reduce using rule 39 (commands)


State 85

   11 conditional: IF OPEN_PAREN condexpr . CLOSE_PAREN stmt
   13            | IF OPEN_PAREN condexpr . CLOSE_PAREN stmt ELSE $@1 stmt

    CLOSE_PAREN  shift, and go to state 128


State 86

   15 condexpr: expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 15 (condexpr)


State 87

   41 commands: ENUM IDENTIFIER BLOCK_OPEN . idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 129

    idlist  go to state 130


State 88

   35 commands: RETURN optexpr SEMI_COLON .

    $default  reduce using rule 35 (commands)


State 89

   40 commands: STRUCT IDENTIFIER BLOCK_OPEN . varlist BLOCK_CLOSE

    $default  reduce using rule 43 (varlist)

    varlist  go to state 131


State 90

   21 repetition: DO stmt WHILE . OPEN_PAREN expr CLOSE_PAREN SEMI_COLON

    OPEN_PAREN  shift, and go to state 132


State 91

   20 repetition: FOR OPEN_PAREN optexpr . SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN stmt

    SEMI_COLON  shift, and go to state 133


State 92

   14 conditional: SWITCH OPEN_PAREN condexpr . CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 134


State 93

   38 commands: TYPEDEF IDENTIFIER IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 135


State 94

   19 repetition: WHILE OPEN_PAREN repexpr . CLOSE_PAREN stmt

    CLOSE_PAREN  shift, and go to state 136


State 95

   23 repexpr: $@2 . expr

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 137
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 96

   67 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce using rule 67 (expr)


State 97

   10 stmt: BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 10 (stmt)


State 98

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   84 exprvector: OPEN_BRACKET expr . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 138
    ADD            shift, and go to state 62
    SUB            shift, and go to state 63
    MUL            shift, and go to state 64
    DIV            shift, and go to state 65
    BITWISE_AND    shift, and go to state 66
    BITWISE_OR     shift, and go to state 67
    BITWISE_NOT    shift, and go to state 68
    MOD            shift, and go to state 69
    LEFT_SHIFT     shift, and go to state 70
    RIGHT_SHIFT    shift, and go to state 71
    LT             shift, and go to state 72
    GT             shift, and go to state 73
    LE             shift, and go to state 74
    GE             shift, and go to state 75
    EQ             shift, and go to state 76
    NE             shift, and go to state 77
    BITWISE_XOR    shift, and go to state 78
    LOGICAL_AND    shift, and go to state 79
    LOGICAL_OR     shift, and go to state 80


State 99

   29 termlist: termlist . COMMA term
   33 opttermlist: termlist .

    COMMA  shift, and go to state 139

    $default  reduce using rule 33 (opttermlist)


State 100

   74 term: IDENTIFIER OPEN_PAREN opttermlist . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 140


State 101

   30 termlist: term .

    $default  reduce using rule 30 (termlist)


State 102

   75 term: attr .
   77 attr: attr . POINTER attr

    POINTER  shift, and go to state 82

    $default  reduce using rule 75 (term)


State 103

   86 constvector: OPEN_BRACKET . INTEGER CLOSE_BRACKET

    INTEGER  shift, and go to state 141


State 104

   26 func: IDENTIFIER IDENTIFIER $@3 . OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_PAREN  shift, and go to state 142


State 105

   24 var: IDENTIFIER IDENTIFIER constvector .

    $default  reduce using rule 24 (var)


State 106

   48 expr: expr . ADD expr
   48     | expr ADD expr .
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 48 (expr)


State 107

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   49     | expr SUB expr .
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 49 (expr)


State 108

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   50     | expr MUL expr .
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 50 (expr)


State 109

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   51     | expr DIV expr .
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 51 (expr)


State 110

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   53     | expr BITWISE_AND expr .
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77

    $default  reduce using rule 53 (expr)


State 111

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   54     | expr BITWISE_OR expr .
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78

    $default  reduce using rule 54 (expr)


State 112

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   55     | expr BITWISE_NOT expr .
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 55 (expr)


State 113

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   52     | expr MOD expr .
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 68

    $default  reduce using rule 52 (expr)


State 114

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   57     | expr LEFT_SHIFT expr .
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 57 (expr)


State 115

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   58     | expr RIGHT_SHIFT expr .
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69

    $default  reduce using rule 58 (expr)


State 116

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   61     | expr LT expr .
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 61 (expr)


State 117

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   62     | expr GT expr .
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 62 (expr)


State 118

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   63     | expr LE expr .
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 63 (expr)


State 119

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   64     | expr GE expr .
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71

    $default  reduce using rule 64 (expr)


State 120

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   59     | expr EQ expr .
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75

    $default  reduce using rule 59 (expr)


State 121

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   60     | expr NE expr .
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75

    $default  reduce using rule 60 (expr)


State 122

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   56     | expr BITWISE_XOR expr .
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77

    $default  reduce using rule 56 (expr)


State 123

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   65     | expr LOGICAL_AND expr .
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78

    $default  reduce using rule 65 (expr)


State 124

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   66     | expr LOGICAL_OR expr .

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79

    $default  reduce using rule 66 (expr)


State 125

   76 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 57

    $default  reduce using rule 85 (exprvector)

    exprvector  go to state 60


State 126

   77 attr: attr . POINTER attr
   77     | attr POINTER attr .

    $default  reduce using rule 77 (attr)


State 127

   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr
   71     | attr ASSIGN expr .

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 71 (expr)


State 128

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN . stmt
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN . stmt ELSE $@1 stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 143
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 129

   44 idlist: IDENTIFIER . COMMA idlist
   45       | IDENTIFIER .

    COMMA  shift, and go to state 144

    $default  reduce using rule 45 (idlist)


State 130

   41 commands: ENUM IDENTIFIER BLOCK_OPEN idlist . BLOCK_CLOSE

    BLOCK_CLOSE  shift, and go to state 145


State 131

   40 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist . BLOCK_CLOSE
   42 varlist: varlist . var SEMI_COLON

    BLOCK_CLOSE  shift, and go to state 146
    IDENTIFIER   shift, and go to state 147

    var  go to state 148


State 132

   21 repetition: DO stmt WHILE OPEN_PAREN . expr CLOSE_PAREN SEMI_COLON

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    expr     go to state 149
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 133

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON . optexpr SEMI_COLON optexpr CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 47 (optexpr)

    optexpr  go to state 150
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 134

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN . BLOCK_OPEN caselist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 151


State 135

   38 commands: TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON .

    $default  reduce using rule 38 (commands)


State 136

   19 repetition: WHILE OPEN_PAREN repexpr CLOSE_PAREN . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 152
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 137

   23 repexpr: $@2 expr .
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80

    $default  reduce using rule 23 (repexpr)


State 138

   84 exprvector: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 84 (exprvector)


State 139

   29 termlist: termlist COMMA . term

    DECIMAL     shift, and go to state 21
    STRING      shift, and go to state 22
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 24
    TRUE        shift, and go to state 25
    FALSE       shift, and go to state 26

    term     go to state 153
    attr     go to state 102
    const    go to state 36
    boolean  go to state 37


State 140

   74 term: IDENTIFIER OPEN_PAREN opttermlist CLOSE_PAREN .

    $default  reduce using rule 74 (term)


State 141

   86 constvector: OPEN_BRACKET INTEGER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 154


State 142

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN . opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 147

    $default  reduce using rule 32 (opttypelist)

    var          go to state 155
    typelist     go to state 156
    opttypelist  go to state 157


State 143

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt .
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN stmt . ELSE $@1 stmt

    ELSE  shift, and go to state 158

    $default  reduce using rule 11 (conditional)


State 144

   44 idlist: IDENTIFIER COMMA . idlist

    IDENTIFIER  shift, and go to state 129

    idlist  go to state 159


State 145

   41 commands: ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE .

    $default  reduce using rule 41 (commands)


State 146

   40 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE .

    $default  reduce using rule 40 (commands)


State 147

   24 var: IDENTIFIER . IDENTIFIER constvector

    IDENTIFIER  shift, and go to state 160


State 148

   42 varlist: varlist var . SEMI_COLON

    SEMI_COLON  shift, and go to state 161


State 149

   21 repetition: DO stmt WHILE OPEN_PAREN expr . CLOSE_PAREN SEMI_COLON
   48 expr: expr . ADD expr
   49     | expr . SUB expr
   50     | expr . MUL expr
   51     | expr . DIV expr
   52     | expr . MOD expr
   53     | expr . BITWISE_AND expr
   54     | expr . BITWISE_OR expr
   55     | expr . BITWISE_NOT expr
   56     | expr . BITWISE_XOR expr
   57     | expr . LEFT_SHIFT expr
   58     | expr . RIGHT_SHIFT expr
   59     | expr . EQ expr
   60     | expr . NE expr
   61     | expr . LT expr
   62     | expr . GT expr
   63     | expr . LE expr
   64     | expr . GE expr
   65     | expr . LOGICAL_AND expr
   66     | expr . LOGICAL_OR expr

    CLOSE_PAREN  shift, and go to state 162
    ADD          shift, and go to state 62
    SUB          shift, and go to state 63
    MUL          shift, and go to state 64
    DIV          shift, and go to state 65
    BITWISE_AND  shift, and go to state 66
    BITWISE_OR   shift, and go to state 67
    BITWISE_NOT  shift, and go to state 68
    MOD          shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70
    RIGHT_SHIFT  shift, and go to state 71
    LT           shift, and go to state 72
    GT           shift, and go to state 73
    LE           shift, and go to state 74
    GE           shift, and go to state 75
    EQ           shift, and go to state 76
    NE           shift, and go to state 77
    BITWISE_XOR  shift, and go to state 78
    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80


State 150

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON optexpr . SEMI_COLON optexpr CLOSE_PAREN stmt

    SEMI_COLON  shift, and go to state 163


State 151

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN . caselist BLOCK_CLOSE

    $default  reduce using rule 18 (caselist)

    caselist  go to state 164


State 152

   19 repetition: WHILE OPEN_PAREN repexpr CLOSE_PAREN stmt .

    $default  reduce using rule 19 (repetition)


State 153

   29 termlist: termlist COMMA term .

    $default  reduce using rule 29 (termlist)


State 154

   86 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET .

    $default  reduce using rule 86 (constvector)


State 155

   28 typelist: var .

    $default  reduce using rule 28 (typelist)


State 156

   27 typelist: typelist . COMMA var
   31 opttypelist: typelist .

    COMMA  shift, and go to state 165

    $default  reduce using rule 31 (opttypelist)


State 157

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist . CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 166


State 158

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE . $@1 stmt

    $default  reduce using rule 12 ($@1)

    $@1  go to state 167


State 159

   44 idlist: IDENTIFIER COMMA idlist .

    $default  reduce using rule 44 (idlist)


State 160

   24 var: IDENTIFIER IDENTIFIER . constvector

    OPEN_BRACKET  shift, and go to state 103

    $default  reduce using rule 87 (constvector)

    constvector  go to state 105


State 161

   42 varlist: varlist var SEMI_COLON .

    $default  reduce using rule 42 (varlist)


State 162

   21 repetition: DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN . SEMI_COLON

    SEMI_COLON  shift, and go to state 168


State 163

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON . optexpr CLOSE_PAREN stmt

    SIZEOF       shift, and go to state 13
    OPEN_PAREN   shift, and go to state 17
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 43
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 47 (optexpr)

    optexpr  go to state 169
    expr     go to state 45
    term     go to state 34
    attr     go to state 35
    const    go to state 36
    boolean  go to state 37


State 164

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist . BLOCK_CLOSE
   16 caselist: caselist . CASE term COLON stmts
   17         | caselist . DEFAULT COLON stmts

    CASE         shift, and go to state 170
    DEFAULT      shift, and go to state 171
    BLOCK_CLOSE  shift, and go to state 172


State 165

   27 typelist: typelist COMMA . var

    IDENTIFIER  shift, and go to state 147

    var  go to state 173


State 166

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN . BLOCK_OPEN stmts BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 174


State 167

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 175
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 168

   21 repetition: DO stmt WHILE OPEN_PAREN expr CLOSE_PAREN SEMI_COLON .

    $default  reduce using rule 21 (repetition)


State 169

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON optexpr . CLOSE_PAREN stmt

    CLOSE_PAREN  shift, and go to state 176


State 170

   16 caselist: caselist CASE . term COLON stmts

    DECIMAL     shift, and go to state 21
    STRING      shift, and go to state 22
    IDENTIFIER  shift, and go to state 43
    INTEGER     shift, and go to state 24
    TRUE        shift, and go to state 25
    FALSE       shift, and go to state 26

    term     go to state 177
    attr     go to state 102
    const    go to state 36
    boolean  go to state 37


State 171

   17 caselist: caselist DEFAULT . COLON stmts

    COLON  shift, and go to state 178


State 172

   14 conditional: SWITCH OPEN_PAREN condexpr CLOSE_PAREN BLOCK_OPEN caselist BLOCK_CLOSE .

    $default  reduce using rule 14 (conditional)


State 173

   27 typelist: typelist COMMA var .

    $default  reduce using rule 27 (typelist)


State 174

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 179


State 175

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt .

    $default  reduce using rule 13 (conditional)


State 176

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 180
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 177

   16 caselist: caselist CASE term . COLON stmts

    COLON  shift, and go to state 181


State 178

   17 caselist: caselist DEFAULT COLON . stmts

    $default  reduce using rule 3 (stmts)

    stmts  go to state 182


State 179

    2 stmts: stmts . stmt
   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_CLOSE  shift, and go to state 183
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    stmt         go to state 27
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 180

   20 repetition: FOR OPEN_PAREN optexpr SEMI_COLON optexpr SEMI_COLON optexpr CLOSE_PAREN stmt .

    $default  reduce using rule 20 (repetition)


State 181

   16 caselist: caselist CASE term COLON . stmts

    $default  reduce using rule 3 (stmts)

    stmts  go to state 184


State 182

    2 stmts: stmts . stmt
   17 caselist: caselist DEFAULT COLON stmts .

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 17 (caselist)

    stmt         go to state 27
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37


State 183

   26 func: IDENTIFIER IDENTIFIER $@3 OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 26 (func)


State 184

    2 stmts: stmts . stmt
   16 caselist: caselist CASE term COLON stmts .

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    DO           shift, and go to state 11
    FOR          shift, and go to state 12
    SIZEOF       shift, and go to state 13
    SWITCH       shift, and go to state 14
    TYPEDEF      shift, and go to state 15
    WHILE        shift, and go to state 16
    OPEN_PAREN   shift, and go to state 17
    BLOCK_OPEN   shift, and go to state 18
    SUB          shift, and go to state 19
    LOGICAL_NOT  shift, and go to state 20
    DECIMAL      shift, and go to state 21
    STRING       shift, and go to state 22
    IDENTIFIER   shift, and go to state 23
    INTEGER      shift, and go to state 24
    TRUE         shift, and go to state 25
    FALSE        shift, and go to state 26

    $default  reduce using rule 16 (caselist)

    stmt         go to state 27
    conditional  go to state 28
    repetition   go to state 29
    var          go to state 30
    func         go to state 31
    commands     go to state 32
    expr         go to state 33
    term         go to state 34
    attr         go to state 35
    const        go to state 36
    boolean      go to state 37

Terminals unused in grammar

    MAIN
    CASE
    CONST
    DEFAULT
    DO
    PRINTF
    SCANF
    GOTO
    SWITCH
    UNION
    FREE
    SLICE
    SOME
    REDUCE
    FILTER
    MAP
    SORT
    COLON
    INVALID
    UMINUS
    DOT


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmts stmt
    3      | %empty

    4 stmt: conditional
    5     | repetition
    6     | func
    7     | var SEMI_COLON
    8     | commands
    9     | expr SEMI_COLON
   10     | BLOCK_OPEN stmts BLOCK_CLOSE

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt

   12 $@1: %empty

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

   14 condexpr: expr

   15 $@2: %empty

   16 $@3: %empty

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

   18 $@4: %empty

   19 $@5: %empty

   20 $@6: %empty

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

   22 repexpr: expr

   23 var: IDENTIFIER IDENTIFIER constvector

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

   25 typelist: typelist COMMA var
   26         | var

   27 exprlist: exprlist COMMA expr
   28         | expr

   29 opttypelist: typelist
   30            | %empty

   31 optexprlist: exprlist
   32            | %empty

   33 commands: RETURN optexpr SEMI_COLON
   34         | BREAK SEMI_COLON
   35         | CONTINUE SEMI_COLON
   36         | TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON
   37         | INCLUDE STRING SEMI_COLON
   38         | STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE
   39         | ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

   40 varlist: varlist var SEMI_COLON
   41        | %empty

   42 idlist: idlist COMMA IDENTIFIER
   43       | IDENTIFIER

   44 optexpr: expr
   45        | %empty

   46 expr: expr ADD expr
   47     | expr SUB expr
   48     | expr MUL expr
   49     | expr DIV expr
   50     | expr MOD expr
   51     | expr BITWISE_AND expr
   52     | expr BITWISE_OR expr
   53     | expr BITWISE_NOT expr
   54     | expr BITWISE_XOR expr
   55     | expr LEFT_SHIFT expr
   56     | expr RIGHT_SHIFT expr
   57     | expr EQ expr
   58     | expr NE expr
   59     | expr LT expr
   60     | expr GT expr
   61     | expr LE expr
   62     | expr GE expr
   63     | expr LOGICAL_AND expr
   64     | expr LOGICAL_OR expr
   65     | OPEN_PAREN expr CLOSE_PAREN
   66     | LOGICAL_NOT expr
   67     | SUB expr
   68     | term
   69     | attr ASSIGN expr
   70     | SIZEOF IDENTIFIER

   71 term: const
   72     | IDENTIFIER OPEN_PAREN optexprlist CLOSE_PAREN
   73     | attr

   74 attr: IDENTIFIER exprvector
   75     | attr POINTER attr

   76 const: INTEGER
   77      | DECIMAL
   78      | STRING
   79      | boolean

   80 boolean: TRUE
   81        | FALSE

   82 exprvector: OPEN_BRACKET expr CLOSE_BRACKET
   83           | %empty

   84 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET
   85            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE (258) 37
    MAIN (259)
    BREAK (260) 34
    CASE (261)
    CONST (262)
    CONTINUE (263) 35
    DEFAULT (264)
    IF (265) 11 13
    ELSE (266) 13
    ENUM (267) 39
    RETURN (268) 33
    STRUCT (269) 38
    DO (270)
    PRINTF (271)
    SCANF (272)
    FOR (273) 21
    GOTO (274)
    SIZEOF (275) 70
    SWITCH (276)
    TYPEDEF (277) 36
    UNION (278)
    WHILE (279) 17
    FREE (280)
    POINTER (281) 75
    SLICE (282)
    SOME (283)
    REDUCE (284)
    FILTER (285)
    MAP (286)
    SORT (287)
    CLOSE_BRACKET (288) 82 84
    OPEN_BRACKET (289) 82 84
    CLOSE_PAREN (290) 11 13 17 21 24 65 72
    OPEN_PAREN (291) 11 13 17 21 24 65 72
    BLOCK_CLOSE (292) 10 24 38 39
    BLOCK_OPEN (293) 10 24 38 39
    ADD (294) 46
    SUB (295) 47 67
    MUL (296) 48
    DIV (297) 49
    BITWISE_AND (298) 51
    BITWISE_OR (299) 52
    BITWISE_NOT (300) 53
    MOD (301) 50
    LEFT_SHIFT (302) 55
    RIGHT_SHIFT (303) 56
    LT (304) 59
    GT (305) 60
    LE (306) 61
    GE (307) 62
    EQ (308) 57
    NE (309) 58
    BITWISE_XOR (310) 54
    LOGICAL_AND (311) 63
    LOGICAL_OR (312) 64
    LOGICAL_NOT (313) 66
    COLON (314)
    SEMI_COLON (315) 7 9 21 33 34 35 36 37 40
    ASSIGN (316) 69
    COMMA (317) 25 27 42
    INVALID (318)
    UMINUS (319)
    DOT (320)
    DECIMAL <data> (321) 77
    STRING <data> (322) 37 78
    IDENTIFIER <data> (323) 23 24 36 38 39 42 43 70 72 74
    INTEGER <data> (324) 76 84
    TRUE <data> (325) 80
    FALSE <data> (326) 81
    IFX (327)
    UNARY (328)


Nonterminals, with rules where they appear

    $accept (74)
        on left: 0
    program <data> (75)
        on left: 1
        on right: 0
    stmts <data> (76)
        on left: 2 3
        on right: 1 2 10 24
    stmt <data> (77)
        on left: 4 5 6 7 8 9 10
        on right: 2 11 13 17 21
    conditional <data> (78)
        on left: 11 13
        on right: 4
    $@1 (79)
        on left: 12
        on right: 13
    condexpr <data> (80)
        on left: 14
        on right: 11 13
    repetition <data> (81)
        on left: 17 21
        on right: 5
    $@2 (82)
        on left: 15
        on right: 17
    $@3 (83)
        on left: 16
        on right: 17
    $@4 (84)
        on left: 18
        on right: 21
    $@5 (85)
        on left: 19
        on right: 21
    $@6 (86)
        on left: 20
        on right: 21
    repexpr <data> (87)
        on left: 22
        on right: 17 21
    var <data> (88)
        on left: 23
        on right: 7 25 26 40
    func <data> (89)
        on left: 24
        on right: 6
    typelist <data> (90)
        on left: 25 26
        on right: 25 29
    exprlist <data> (91)
        on left: 27 28
        on right: 27 31
    opttypelist <data> (92)
        on left: 29 30
        on right: 24
    optexprlist <data> (93)
        on left: 31 32
        on right: 72
    commands <data> (94)
        on left: 33 34 35 36 37 38 39
        on right: 8
    varlist <data> (95)
        on left: 40 41
        on right: 38 40
    idlist <data> (96)
        on left: 42 43
        on right: 39 42
    optexpr <data> (97)
        on left: 44 45
        on right: 21 33
    expr <data> (98)
        on left: 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
        on right: 9 14 22 27 28 44 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 69 82
    term <data> (99)
        on left: 71 72 73
        on right: 68
    attr <data> (100)
        on left: 74 75
        on right: 69 73 75
    const <data> (101)
        on left: 76 77 78 79
        on right: 71
    boolean <data> (102)
        on left: 80 81
        on right: 79
    exprvector <data> (103)
        on left: 82 83
        on right: 74
    constvector <data> (104)
        on left: 84 85
        on right: 23


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (stmts)

    program  go to state 1
    stmts    go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: stmts .
    2 stmts: stmts . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 1 (program)

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 3

    0 $accept: program $end .

    $default  accept


State 4

   37 commands: INCLUDE . STRING SEMI_COLON

    STRING  shift, and go to state 36


State 5

   34 commands: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 37


State 6

   35 commands: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 38


State 7

   11 conditional: IF . OPEN_PAREN condexpr CLOSE_PAREN stmt
   13            | IF . OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    OPEN_PAREN  shift, and go to state 39


State 8

   39 commands: ENUM . IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 40


State 9

   33 commands: RETURN . optexpr SEMI_COLON

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 45 (optexpr)

    optexpr  go to state 42
    expr     go to state 43
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 10

   38 commands: STRUCT . IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 44


State 11

   21 repetition: FOR . OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    OPEN_PAREN  shift, and go to state 45


State 12

   70 expr: SIZEOF . IDENTIFIER

    IDENTIFIER  shift, and go to state 46


State 13

   36 commands: TYPEDEF . IDENTIFIER IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 47


State 14

   17 repetition: WHILE . $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

    $default  reduce using rule 15 ($@2)

    $@2  go to state 48


State 15

   65 expr: OPEN_PAREN . expr CLOSE_PAREN

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 49
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 16

   10 stmt: BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 50


State 17

   67 expr: SUB . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 51
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 18

   66 expr: LOGICAL_NOT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 52
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 19

   77 const: DECIMAL .

    $default  reduce using rule 77 (const)


State 20

   78 const: STRING .

    $default  reduce using rule 78 (const)


State 21

   23 var: IDENTIFIER . IDENTIFIER constvector
   24 func: IDENTIFIER . IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE
   72 term: IDENTIFIER . OPEN_PAREN optexprlist CLOSE_PAREN
   74 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 53
    OPEN_PAREN    shift, and go to state 54
    IDENTIFIER    shift, and go to state 55

    $default  reduce using rule 83 (exprvector)

    exprvector  go to state 56


State 22

   76 const: INTEGER .

    $default  reduce using rule 76 (const)


State 23

   80 boolean: TRUE .

    $default  reduce using rule 80 (boolean)


State 24

   81 boolean: FALSE .

    $default  reduce using rule 81 (boolean)


State 25

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


State 26

    4 stmt: conditional .

    $default  reduce using rule 4 (stmt)


State 27

    5 stmt: repetition .

    $default  reduce using rule 5 (stmt)


State 28

    7 stmt: var . SEMI_COLON

    SEMI_COLON  shift, and go to state 57


State 29

    6 stmt: func .

    $default  reduce using rule 6 (stmt)


State 30

    8 stmt: commands .

    $default  reduce using rule 8 (stmt)


State 31

    9 stmt: expr . SEMI_COLON
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76
    SEMI_COLON   shift, and go to state 77


State 32

   68 expr: term .

    $default  reduce using rule 68 (expr)


State 33

   69 expr: attr . ASSIGN expr
   73 term: attr .
   75 attr: attr . POINTER attr

    POINTER  shift, and go to state 78
    ASSIGN   shift, and go to state 79

    $default  reduce using rule 73 (term)


State 34

   71 term: const .

    $default  reduce using rule 71 (term)


State 35

   79 const: boolean .

    $default  reduce using rule 79 (const)


State 36

   37 commands: INCLUDE STRING . SEMI_COLON

    SEMI_COLON  shift, and go to state 80


State 37

   34 commands: BREAK SEMI_COLON .

    $default  reduce using rule 34 (commands)


State 38

   35 commands: CONTINUE SEMI_COLON .

    $default  reduce using rule 35 (commands)


State 39

   11 conditional: IF OPEN_PAREN . condexpr CLOSE_PAREN stmt
   13            | IF OPEN_PAREN . condexpr CLOSE_PAREN stmt ELSE $@1 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    condexpr  go to state 81
    expr      go to state 82
    term      go to state 32
    attr      go to state 33
    const     go to state 34
    boolean   go to state 35


State 40

   39 commands: ENUM IDENTIFIER . BLOCK_OPEN idlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 83


State 41

   72 term: IDENTIFIER . OPEN_PAREN optexprlist CLOSE_PAREN
   74 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 53
    OPEN_PAREN    shift, and go to state 54

    $default  reduce using rule 83 (exprvector)

    exprvector  go to state 56


State 42

   33 commands: RETURN optexpr . SEMI_COLON

    SEMI_COLON  shift, and go to state 84


State 43

   44 optexpr: expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 44 (optexpr)


State 44

   38 commands: STRUCT IDENTIFIER . BLOCK_OPEN varlist BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 85


State 45

   21 repetition: FOR OPEN_PAREN . optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 45 (optexpr)

    optexpr  go to state 86
    expr     go to state 43
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 46

   70 expr: SIZEOF IDENTIFIER .

    $default  reduce using rule 70 (expr)


State 47

   36 commands: TYPEDEF IDENTIFIER . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 87


State 48

   17 repetition: WHILE $@2 . OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt

    OPEN_PAREN  shift, and go to state 88


State 49

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   65     | OPEN_PAREN expr . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 89
    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76


State 50

    2 stmts: stmts . stmt
   10 stmt: BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_CLOSE  shift, and go to state 90
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 51

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   67     | SUB expr .

    $default  reduce using rule 67 (expr)


State 52

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   66     | LOGICAL_NOT expr .

    $default  reduce using rule 66 (expr)


State 53

   82 exprvector: OPEN_BRACKET . expr CLOSE_BRACKET

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 91
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 54

   72 term: IDENTIFIER OPEN_PAREN . optexprlist CLOSE_PAREN

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 32 (optexprlist)

    exprlist     go to state 92
    optexprlist  go to state 93
    expr         go to state 94
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 55

   23 var: IDENTIFIER IDENTIFIER . constvector
   24 func: IDENTIFIER IDENTIFIER . OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    OPEN_BRACKET  shift, and go to state 95
    OPEN_PAREN    shift, and go to state 96

    $default  reduce using rule 85 (constvector)

    constvector  go to state 97


State 56

   74 attr: IDENTIFIER exprvector .

    $default  reduce using rule 74 (attr)


State 57

    7 stmt: var SEMI_COLON .

    $default  reduce using rule 7 (stmt)


State 58

   46 expr: expr ADD . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 98
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 59

   47 expr: expr SUB . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 99
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 60

   48 expr: expr MUL . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 100
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 61

   49 expr: expr DIV . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 101
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 62

   51 expr: expr BITWISE_AND . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 102
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 63

   52 expr: expr BITWISE_OR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 103
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 64

   53 expr: expr BITWISE_NOT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 104
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 65

   50 expr: expr MOD . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 105
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 66

   55 expr: expr LEFT_SHIFT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 106
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 67

   56 expr: expr RIGHT_SHIFT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 107
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 68

   59 expr: expr LT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 108
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 69

   60 expr: expr GT . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 109
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 70

   61 expr: expr LE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 110
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 71

   62 expr: expr GE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 111
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 72

   57 expr: expr EQ . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 112
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 73

   58 expr: expr NE . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 113
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 74

   54 expr: expr BITWISE_XOR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 114
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 75

   63 expr: expr LOGICAL_AND . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 115
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 76

   64 expr: expr LOGICAL_OR . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 116
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 77

    9 stmt: expr SEMI_COLON .

    $default  reduce using rule 9 (stmt)


State 78

   75 attr: attr POINTER . attr

    IDENTIFIER  shift, and go to state 117

    attr  go to state 118


State 79

   69 expr: attr ASSIGN . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 119
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 80

   37 commands: INCLUDE STRING SEMI_COLON .

    $default  reduce using rule 37 (commands)


State 81

   11 conditional: IF OPEN_PAREN condexpr . CLOSE_PAREN stmt
   13            | IF OPEN_PAREN condexpr . CLOSE_PAREN stmt ELSE $@1 stmt

    CLOSE_PAREN  shift, and go to state 120


State 82

   14 condexpr: expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 14 (condexpr)


State 83

   39 commands: ENUM IDENTIFIER BLOCK_OPEN . idlist BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 121

    idlist  go to state 122


State 84

   33 commands: RETURN optexpr SEMI_COLON .

    $default  reduce using rule 33 (commands)


State 85

   38 commands: STRUCT IDENTIFIER BLOCK_OPEN . varlist BLOCK_CLOSE

    $default  reduce using rule 41 (varlist)

    varlist  go to state 123


State 86

   21 repetition: FOR OPEN_PAREN optexpr . $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    $default  reduce using rule 18 ($@4)

    $@4  go to state 124


State 87

   36 commands: TYPEDEF IDENTIFIER IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 125


State 88

   17 repetition: WHILE $@2 OPEN_PAREN . repexpr CLOSE_PAREN $@3 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    repexpr  go to state 126
    expr     go to state 127
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 89

   65 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce using rule 65 (expr)


State 90

   10 stmt: BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 10 (stmt)


State 91

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   82 exprvector: OPEN_BRACKET expr . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 128
    ADD            shift, and go to state 58
    SUB            shift, and go to state 59
    MUL            shift, and go to state 60
    DIV            shift, and go to state 61
    BITWISE_AND    shift, and go to state 62
    BITWISE_OR     shift, and go to state 63
    BITWISE_NOT    shift, and go to state 64
    MOD            shift, and go to state 65
    LEFT_SHIFT     shift, and go to state 66
    RIGHT_SHIFT    shift, and go to state 67
    LT             shift, and go to state 68
    GT             shift, and go to state 69
    LE             shift, and go to state 70
    GE             shift, and go to state 71
    EQ             shift, and go to state 72
    NE             shift, and go to state 73
    BITWISE_XOR    shift, and go to state 74
    LOGICAL_AND    shift, and go to state 75
    LOGICAL_OR     shift, and go to state 76


State 92

   27 exprlist: exprlist . COMMA expr
   31 optexprlist: exprlist .

    COMMA  shift, and go to state 129

    $default  reduce using rule 31 (optexprlist)


State 93

   72 term: IDENTIFIER OPEN_PAREN optexprlist . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 130


State 94

   28 exprlist: expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 28 (exprlist)


State 95

   84 constvector: OPEN_BRACKET . INTEGER CLOSE_BRACKET

    INTEGER  shift, and go to state 131


State 96

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN . opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    IDENTIFIER  shift, and go to state 132

    $default  reduce using rule 30 (opttypelist)

    var          go to state 133
    typelist     go to state 134
    opttypelist  go to state 135


State 97

   23 var: IDENTIFIER IDENTIFIER constvector .

    $default  reduce using rule 23 (var)


State 98

   46 expr: expr . ADD expr
   46     | expr ADD expr .
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65

    $default  reduce using rule 46 (expr)


State 99

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   47     | expr SUB expr .
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65

    $default  reduce using rule 47 (expr)


State 100

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   48     | expr MUL expr .
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 64

    $default  reduce using rule 48 (expr)


State 101

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   49     | expr DIV expr .
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 64

    $default  reduce using rule 49 (expr)


State 102

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   51     | expr BITWISE_AND expr .
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73

    $default  reduce using rule 51 (expr)


State 103

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   52     | expr BITWISE_OR expr .
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74

    $default  reduce using rule 52 (expr)


State 104

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   53     | expr BITWISE_NOT expr .
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 64

    $default  reduce using rule 53 (expr)


State 105

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   50     | expr MOD expr .
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    BITWISE_NOT  shift, and go to state 64

    $default  reduce using rule 50 (expr)


State 106

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   55     | expr LEFT_SHIFT expr .
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65

    $default  reduce using rule 55 (expr)


State 107

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   56     | expr RIGHT_SHIFT expr .
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65

    $default  reduce using rule 56 (expr)


State 108

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   59     | expr LT expr .
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67

    $default  reduce using rule 59 (expr)


State 109

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   60     | expr GT expr .
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67

    $default  reduce using rule 60 (expr)


State 110

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   61     | expr LE expr .
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67

    $default  reduce using rule 61 (expr)


State 111

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   62     | expr GE expr .
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67

    $default  reduce using rule 62 (expr)


State 112

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   57     | expr EQ expr .
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71

    $default  reduce using rule 57 (expr)


State 113

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   58     | expr NE expr .
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71

    $default  reduce using rule 58 (expr)


State 114

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   54     | expr BITWISE_XOR expr .
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73

    $default  reduce using rule 54 (expr)


State 115

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   63     | expr LOGICAL_AND expr .
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74

    $default  reduce using rule 63 (expr)


State 116

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   64     | expr LOGICAL_OR expr .

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75

    $default  reduce using rule 64 (expr)


State 117

   74 attr: IDENTIFIER . exprvector

    OPEN_BRACKET  shift, and go to state 53

    $default  reduce using rule 83 (exprvector)

    exprvector  go to state 56


State 118

   75 attr: attr . POINTER attr
   75     | attr POINTER attr .

    $default  reduce using rule 75 (attr)


State 119

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr
   69     | attr ASSIGN expr .

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 69 (expr)


State 120

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN . stmt
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN . stmt ELSE $@1 stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 136
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 121

   43 idlist: IDENTIFIER .

    $default  reduce using rule 43 (idlist)


State 122

   39 commands: ENUM IDENTIFIER BLOCK_OPEN idlist . BLOCK_CLOSE
   42 idlist: idlist . COMMA IDENTIFIER

    BLOCK_CLOSE  shift, and go to state 137
    COMMA        shift, and go to state 138


State 123

   38 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist . BLOCK_CLOSE
   40 varlist: varlist . var SEMI_COLON

    BLOCK_CLOSE  shift, and go to state 139
    IDENTIFIER   shift, and go to state 132

    var  go to state 140


State 124

   21 repetition: FOR OPEN_PAREN optexpr $@4 . SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SEMI_COLON  shift, and go to state 141


State 125

   36 commands: TYPEDEF IDENTIFIER IDENTIFIER SEMI_COLON .

    $default  reduce using rule 36 (commands)


State 126

   17 repetition: WHILE $@2 OPEN_PAREN repexpr . CLOSE_PAREN $@3 stmt

    CLOSE_PAREN  shift, and go to state 142


State 127

   22 repexpr: expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 22 (repexpr)


State 128

   82 exprvector: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 82 (exprvector)


State 129

   27 exprlist: exprlist COMMA . expr

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    expr     go to state 143
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 130

   72 term: IDENTIFIER OPEN_PAREN optexprlist CLOSE_PAREN .

    $default  reduce using rule 72 (term)


State 131

   84 constvector: OPEN_BRACKET INTEGER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 144


State 132

   23 var: IDENTIFIER . IDENTIFIER constvector

    IDENTIFIER  shift, and go to state 145


State 133

   26 typelist: var .

    $default  reduce using rule 26 (typelist)


State 134

   25 typelist: typelist . COMMA var
   29 opttypelist: typelist .

    COMMA  shift, and go to state 146

    $default  reduce using rule 29 (opttypelist)


State 135

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist . CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE

    CLOSE_PAREN  shift, and go to state 147


State 136

   11 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt .
   13            | IF OPEN_PAREN condexpr CLOSE_PAREN stmt . ELSE $@1 stmt

    ELSE  shift, and go to state 148

    $default  reduce using rule 11 (conditional)


State 137

   39 commands: ENUM IDENTIFIER BLOCK_OPEN idlist BLOCK_CLOSE .

    $default  reduce using rule 39 (commands)


State 138

   42 idlist: idlist COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 149


State 139

   38 commands: STRUCT IDENTIFIER BLOCK_OPEN varlist BLOCK_CLOSE .

    $default  reduce using rule 38 (commands)


State 140

   40 varlist: varlist var . SEMI_COLON

    SEMI_COLON  shift, and go to state 150


State 141

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON . repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    repexpr  go to state 151
    expr     go to state 127
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 142

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN . $@3 stmt

    $default  reduce using rule 16 ($@3)

    $@3  go to state 152


State 143

   27 exprlist: exprlist COMMA expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MUL expr
   49     | expr . DIV expr
   50     | expr . MOD expr
   51     | expr . BITWISE_AND expr
   52     | expr . BITWISE_OR expr
   53     | expr . BITWISE_NOT expr
   54     | expr . BITWISE_XOR expr
   55     | expr . LEFT_SHIFT expr
   56     | expr . RIGHT_SHIFT expr
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . LT expr
   60     | expr . GT expr
   61     | expr . LE expr
   62     | expr . GE expr
   63     | expr . LOGICAL_AND expr
   64     | expr . LOGICAL_OR expr

    ADD          shift, and go to state 58
    SUB          shift, and go to state 59
    MUL          shift, and go to state 60
    DIV          shift, and go to state 61
    BITWISE_AND  shift, and go to state 62
    BITWISE_OR   shift, and go to state 63
    BITWISE_NOT  shift, and go to state 64
    MOD          shift, and go to state 65
    LEFT_SHIFT   shift, and go to state 66
    RIGHT_SHIFT  shift, and go to state 67
    LT           shift, and go to state 68
    GT           shift, and go to state 69
    LE           shift, and go to state 70
    GE           shift, and go to state 71
    EQ           shift, and go to state 72
    NE           shift, and go to state 73
    BITWISE_XOR  shift, and go to state 74
    LOGICAL_AND  shift, and go to state 75
    LOGICAL_OR   shift, and go to state 76

    $default  reduce using rule 27 (exprlist)


State 144

   84 constvector: OPEN_BRACKET INTEGER CLOSE_BRACKET .

    $default  reduce using rule 84 (constvector)


State 145

   23 var: IDENTIFIER IDENTIFIER . constvector

    OPEN_BRACKET  shift, and go to state 95

    $default  reduce using rule 85 (constvector)

    constvector  go to state 97


State 146

   25 typelist: typelist COMMA . var

    IDENTIFIER  shift, and go to state 132

    var  go to state 153


State 147

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN . BLOCK_OPEN stmts BLOCK_CLOSE

    BLOCK_OPEN  shift, and go to state 154


State 148

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE . $@1 stmt

    $default  reduce using rule 12 ($@1)

    $@1  go to state 155


State 149

   42 idlist: idlist COMMA IDENTIFIER .

    $default  reduce using rule 42 (idlist)


State 150

   40 varlist: varlist var SEMI_COLON .

    $default  reduce using rule 40 (varlist)


State 151

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr . SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt

    SEMI_COLON  shift, and go to state 156


State 152

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 157
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 153

   25 typelist: typelist COMMA var .

    $default  reduce using rule 25 (typelist)


State 154

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN . stmts BLOCK_CLOSE

    $default  reduce using rule 3 (stmts)

    stmts  go to state 158


State 155

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 159
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 156

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON . $@5 optexpr CLOSE_PAREN $@6 stmt

    $default  reduce using rule 19 ($@5)

    $@5  go to state 160


State 157

   17 repetition: WHILE $@2 OPEN_PAREN repexpr CLOSE_PAREN $@3 stmt .

    $default  reduce using rule 17 (repetition)


State 158

    2 stmts: stmts . stmt
   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts . BLOCK_CLOSE

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_CLOSE  shift, and go to state 161
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 25
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 159

   13 conditional: IF OPEN_PAREN condexpr CLOSE_PAREN stmt ELSE $@1 stmt .

    $default  reduce using rule 13 (conditional)


State 160

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 . optexpr CLOSE_PAREN $@6 stmt

    SIZEOF       shift, and go to state 12
    OPEN_PAREN   shift, and go to state 15
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 41
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    $default  reduce using rule 45 (optexpr)

    optexpr  go to state 162
    expr     go to state 43
    term     go to state 32
    attr     go to state 33
    const    go to state 34
    boolean  go to state 35


State 161

   24 func: IDENTIFIER IDENTIFIER OPEN_PAREN opttypelist CLOSE_PAREN BLOCK_OPEN stmts BLOCK_CLOSE .

    $default  reduce using rule 24 (func)


State 162

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr . CLOSE_PAREN $@6 stmt

    CLOSE_PAREN  shift, and go to state 163


State 163

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN . $@6 stmt

    $default  reduce using rule 20 ($@6)

    $@6  go to state 164


State 164

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 . stmt

    INCLUDE      shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    IF           shift, and go to state 7
    ENUM         shift, and go to state 8
    RETURN       shift, and go to state 9
    STRUCT       shift, and go to state 10
    FOR          shift, and go to state 11
    SIZEOF       shift, and go to state 12
    TYPEDEF      shift, and go to state 13
    WHILE        shift, and go to state 14
    OPEN_PAREN   shift, and go to state 15
    BLOCK_OPEN   shift, and go to state 16
    SUB          shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18
    DECIMAL      shift, and go to state 19
    STRING       shift, and go to state 20
    IDENTIFIER   shift, and go to state 21
    INTEGER      shift, and go to state 22
    TRUE         shift, and go to state 23
    FALSE        shift, and go to state 24

    stmt         go to state 165
    conditional  go to state 26
    repetition   go to state 27
    var          go to state 28
    func         go to state 29
    commands     go to state 30
    expr         go to state 31
    term         go to state 32
    attr         go to state 33
    const        go to state 34
    boolean      go to state 35


State 165

   21 repetition: FOR OPEN_PAREN optexpr $@4 SEMI_COLON repexpr SEMI_COLON $@5 optexpr CLOSE_PAREN $@6 stmt .

    $default  reduce using rule 21 (repetition)
